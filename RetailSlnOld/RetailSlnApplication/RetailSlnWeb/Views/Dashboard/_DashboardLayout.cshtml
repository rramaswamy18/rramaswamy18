@using ArchitectureLibraryCacheData
@{
    var clientId = ArchLibCache.ClientId;
    var clientName = ArchLibCache.ClientName;
    var imageTitle = ArchLibCache.GetApplicationDefault(clientId, "BusinessName1", "") + " | " + ArchLibCache.GetApplicationDefault(clientId, "BusinessType", "");
}
<!DOCTYPE html>
<html lang="en-us">
<head>
    <meta charset="utf-8" />
    <meta name="author" content="Gajaashwa Inc." />
    <meta name="title" content="@ArchLibCache.GetApplicationDefault(clientId, "Head", "Title")" />
    <meta name="description" content="@ArchLibCache.GetApplicationDefault(clientId, "Head", "Description")" />
    <meta name="keywords" content="@ArchLibCache.GetApplicationDefault(clientId, "Head", "Keywords")" />
    <meta name="robots" content="index, follow" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="language" content="English" />
    <meta name="revisit-after" content="1 days" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ArchLibCache.GetApplicationDefault(clientId, "Head", "Title")</title>
    <link rel="shortcut icon" href="~/ClientSpecific/@(clientId)_@(clientName)/Documents/Images/Favicon.ico" />
    @Styles.Render("~/Content/css0")
    @Scripts.Render("~/bundles/scripts0")

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Patua+One|Open+Sans|Lato|Roboto" />
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css" />

    @RenderSection("scripts", required: false)
    @*<meta name="google-site-verification" content="hcUHXigkvItjrtwx8XIj_7jwJke4wp5fUyHVF_Wq4SU" />
        <meta name="google-site-verification" content="UBFm0SJBuBobvNYmYRJIbcQXn7RmjuDmau-2W5DbYEc" />*@
    <!-- Global site tag (gtag.js) - Google Analytics -->
    <!-- Google Tag Manager -->
    @*<script>
            (function (w, d, s, l, i) {
                w[l] = w[l] || []; w[l].push({
                    'gtm.start':
                        new Date().getTime(), event: 'gtm .js'
                }); var f = d.getElementsByTagName(s)[0],
                    j = d.createElement(s), dl = l != 'dataLayer' ? '&l=' + l : ''; j.async = true; j.src =
                        'https://www.googletagmanager.com/gtm.js?id=' + i + dl; f.parentNode.insertBefore(j, f);
            })(window, document, 'script', 'dataLayer', 'GTM-KDPL9DB');
        </script>*@
    <!-- End Google Tag Manager -->
</head>
<body style="margin-left: auto; margin-right: auto; max-width: 100%; padding: 0px;">
    <script type="text/javascript">
        $(document).ready(function () {
            window_onload();
            shoppingCartSummary_onclick();
        });
        function window_onload() {
            alert("Implement window on load in your page");
        }
        var sessionTimeoutWarning = @Session.Timeout;
        var sessionTimeout = parseInt(sessionTimeoutWarning) * 60 * 1000;
        console.log("Session.Timeout _DashboardLayout", @Session.Timeout, "sessionTimeoutWarning", sessionTimeoutWarning, "sessionTimeout", sessionTimeout, getCurrentDateTime());
        setTimeout(checkLoggedInStatus, sessionTimeout);
        function checkLoggedInStatus() {
            console.log("checkLoggedInStatus() _DashboardLayout Enter", getCurrentDateTime());
            //Sleep for 5 seconds to make sure the session is cleared by Server
            sleep(5000); // Wait for 3 seconds
            console.log("checkLoggedInStatus() _DashboardLayout After Sleep", getCurrentDateTime());
            fetch("@Url.Action("CheckIsAuthenticated", "Home", new { id = "1" })")
                .then(response => response.json())
                .then(data => {
                    console.log(data, data.isAuthenticated);
                    if (data.isAuthenticated) {
                        console.log("Continue Session", getCurrentDateTime());
                        clearTimeout(checkLoggedInStatus);
                        setTimeout(checkLoggedInStatus, sessionTimeout);
                    } else {
                        console.log("End Session", getCurrentDateTime());
                        window.location = "@Url.Action("LoginUserProf", "Home")";
                    }
                });
        }
        function sleep(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
        }
    </script>
    @*
        <script type="text/javascript">
            var counter = 0;
            var testSetTimeoutFunctionId = setInterval(testSetTimeout, 1000); //Will execute every second
            function testSetTimeout() {
                counter++;
                console.log("testSetTimeout", counter);
                if (counter == 15) {
                    clearInterval(testSetTimeoutFunctionId);
                    console.log("testSetTimeout cleared timeout");
                }
            }
        </script>
        <script type="text/javascript">
            var sessionTimeoutWarning = @Session.Timeout + 1;
            var sessionTimeout = parseInt(sessionTimeoutWarning) * 60 * 1000;
            console.log("Session.Timeout", @Session.Timeout, "sessionTimeoutWarning", sessionTimeoutWarning, "sessionTimeout", sessionTimeout, getCurrentDateTime());
            setTimeout(checkLoggedInStatus, sessionTimeout);

            function checkLoggedInStatus() {
                fetch("@Url.Action("CheckAuthStatus", "Dashboard")")
                    .then(response => response.json())
                    .then(data => {
                        console.log(data);
                        if (data.IsAuthenticated == "true") {
                            console.log("Continue Session", getCurrentDateTime());
                            clearTimeout(checkLoggedInStatus);
                            setTimeout(checkLoggedInStatus, sessionTimeout);
                        } else {
                            console.log("End Session", getCurrentDateTime());
                            //window.location = "@Url.Action("Logout", "Home")";
                        }
                    });
            }
        </script>
    *@
    @Html.Partial("_DashboardHeader")
    <div id="divScrollIntoView"></div>
    <div class="center" id="divContainer" style="padding: 0px; text-align: center; width: 100%;">
        @RenderBody()
        @Html.Partial("_DashboardFooter")
    </div>
    @Html.Partial("~/Views/Home/_ShoppingCartModal.cshtml")
    @Html.Partial("_LoadingModal")
</body>
</html>
