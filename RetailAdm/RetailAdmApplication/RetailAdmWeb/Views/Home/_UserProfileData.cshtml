@model ArchitectureLibraryModels.PersonModel
<style>
    #NicknameFirst-error, #NicknameLast-error, #SalutationId-error, #FirstName-error, #MiddleName-error, #LastName-error, #PhoneNumber-error, #TelephoneCountryId-error, #-error, #-error, #-error, #-error, #-error, #-error {
        color: #ff0000;
        display: block;
        font-size: 12px;
        font-weight: bold;
    }
    .fieldValidationError {
        color: #ff0000;
        display: block;
        font-size: 12px;
        font-weight: bold;
    }
</style>
@using ArchitectureLibraryCacheData
@Html.HiddenFor(m => m.AspNetUserId)
@Html.HiddenFor(m => m.CertificateDocumentModel.DocumentId)
@Html.HiddenFor(m => m.HomeDemogInfoAddressModel.DemogInfoAddressId)
@Html.HiddenFor(m => m.HomeDemogInfoAddressModel.DemogInfoCountryId)
@Html.HiddenFor(m => m.CertificateDocumentModel.ServerFileName)
@Html.HiddenFor(m => m.AspNetUserModel.Email)
@{
    List<ArchitectureLibraryModels.CodeDataModel> codeDataModels;
    int i;
    string checkedValue;
}
@if (Model != null && Model.ResponseObjectModel != null && !string.IsNullOrWhiteSpace(Model.ResponseObjectModel.ValidationSummaryMessage))
{
    <div class="row validationSummaryMessage" id="divUserProfileValidationSummaryMessage">
        @Model.ResponseObjectModel.ValidationSummaryMessage
    </div>
}
@if (!ViewData.ModelState.IsValid)
{
    <div class="row" id="divUserProfileValidationSummary" style="margin-left: auto; margin-right: auto; padding: 5px; width: 90%">
        @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationSummary(false, "", new { @class = "validationSummaryErrors", style = "-webkit-column-count: 3; -moz-column-count: 3; column-count: 3; font-size: 12px; text-align: left;" }).ToHtmlString()))
    </div>
}
@if (Model != null && Model.ResponseObjectModel != null)
{
    <div class="row" id="divUserProfileResponseObject">
        @Html.Partial("_ResponseObject", Model.ResponseObjectModel)
    </div>
}

<table style="margin-left: auto; margin-right: auto; font-size: 14px; padding: 5px; table-layout: fixed; width: 90%">
    <tr>
        <td style="padding: 0px; vertical-align: top; width: 47%;">
            <table style="padding: 0px;">
                @if (ArchLibCache.UserProfileMetaDatas.First(x => x.MetaDataName == "Nickname").IsMapped)
                {
                    <tr>
                        <th style="padding: 5px; vertical-align: top;">
                            @Html.LabelFor(m => m.NicknameFirst, new { @class = "col-form-label" })&nbsp;<span style="color: #0000ff; font-weight: bold;">(Required)</span>
                        </th>
                        <td style="padding: 5px; text-align: left;">
                            @Html.TextBoxFor(m => m.NicknameFirst, null, new { @class = "form-control", placeholder = "Nickname first" })
                            @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(m => m.NicknameFirst, "", new { id = "NicknameFirst-error" }).ToHtmlString()))
                        </td>
                    </tr>
                    <tr>
                        <th style="padding: 5px; vertical-align: top;">
                            @Html.LabelFor(m => m.NicknameLast, new { @class = "col-form-label" })&nbsp;<span style="color: #0000ff; font-weight: bold;">(Required)</span>
                        </th>
                        <td style="padding: 5px; text-align: left;">
                            @Html.TextBoxFor(m => m.NicknameLast, null, new { @class = "form-control", placeholder = "Nickname last" })
                            @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(m => m.NicknameLast, null, new { @class = "fieldValidationError" }).ToHtmlString()))
                        </td>
                    </tr>
                }
                @if (ArchLibCache.UserProfileMetaDatas.First(x => x.MetaDataName == "Name").IsMapped)
                {
                    <tr>
                        <th style="padding: 5px; vertical-align: top;">
                            @Html.LabelFor(m => m.SalutationId, new { @class = "col-form-label" })&nbsp;<span style="color: #0000ff; font-weight: bold;">(Required)</span>
                        </th>
                        <td style="padding: 5px; text-align: left;">
                            @Html.DropDownListFor(m => m.SalutationId, new SelectList(LookupCache.CodeTypeSelectListItems["Salutation"]["CodeDataNameId"], "Value", "Text", Model.SalutationId), "---", new { @class = "form-control", style = "font-size: 12px;" })
                            @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(m => m.SalutationId, "", new { id = "SalutationId-error" }).ToHtmlString()))
                        </td>
                    </tr>
                    <tr>
                        <th style="padding: 5px; vertical-align: top;">
                            @Html.LabelFor(m => m.FirstName, new { @class = "col-form-label" })&nbsp;<span style="color: #0000ff; font-weight: bold;">(Required)</span>
                        </th>
                        <td style="padding: 5px; text-align: left;">
                            @Html.TextBoxFor(m => m.FirstName, null, new { @class = "form-control", placeholder = "First name" })
                            @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(m => m.FirstName, "", new { id = "FirstName-error" }).ToHtmlString()))
                        </td>
                    </tr>
                    <tr>
                        <th style="padding: 5px; vertical-align: top;">
                            @Html.LabelFor(m => m.MiddleName, new { @class = "col-form-label" })
                        </th>
                        <td style="padding: 5px; text-align: left;">
                            @Html.TextBoxFor(m => m.MiddleName, null, new { @class = "form-control", placeholder = "Middle name" })
                        </td>
                    </tr>
                    <tr>
                        <th style="padding: 5px; vertical-align: top;">
                            @Html.LabelFor(m => m.LastName, new { @class = "col-form-label" })&nbsp;<span style="color: #0000ff; font-weight: bold;">(Required)</span>
                        </th>
                        <td style="padding: 5px; text-align: left;">
                            @Html.TextBoxFor(m => m.LastName, null, new { @class = "form-control", placeholder = "Last name" })
                            @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(m => m.LastName, null, new { @class = "fieldValidationError" }).ToHtmlString()))
                        </td>
                    </tr>
                    <tr>
                        <th style="padding: 5px; vertical-align: top;">
                            @Html.LabelFor(m => m.SuffixId, new { @class = "col-form-label" })&nbsp;<span style="color: #0000ff; font-weight: bold;">(Required)</span>
                        </th>
                        <td style="padding: 5px; text-align: left;">
                            @Html.DropDownListFor(m => m.SuffixId, new SelectList(LookupCache.CodeTypeSelectListItems["Suffix"]["CodeDataNameId"], "Value", "Text", Model.SuffixId), "---", new { @class = "form-control", style = "font-size: 12px;" })
                            @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(m => m.SuffixId, null, new { @class = "fieldValidationError" }).ToHtmlString()))
                        </td>
                    </tr>
                }
                @if (ArchLibCache.UserProfileMetaDatas.First(x => x.MetaDataName == "Citizenship").IsMapped)
                {
                    <tr>
                        <th style="padding: 5px; vertical-align: top;">
                            @Html.LabelFor(m => m.CitizenshipId, new { @class = "col-form-label" })&nbsp;<span style="color: #0000ff; font-weight: bold;">(Required)</span>
                        </th>
                        <td style="padding: 5px; vertical-align: middle;">
                            @Html.DropDownListFor(m => m.CitizenshipId, new SelectList(LookupCache.CodeTypeSelectListItems["Citizenship"]["CodeDataNameId"], "Value", "Text", Model.CitizenshipId), "---", new { @class = "form-control", style = "font-size: 12px;" })
                            @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(m => m.CitizenshipId, null, new { @class = "fieldValidationError" }).ToHtmlString()))
                        </td>
                    </tr>
                }
                @if (ArchLibCache.UserProfileMetaDatas.First(x => x.MetaDataName == "MaritalStatus").IsMapped)
                {
                    <tr>
                        <th style="padding: 5px; vertical-align: top;">
                            @Html.LabelFor(m => m.MaritalStatusId, new { @class = "col-form-label" })&nbsp;<span style="color: #0000ff; font-weight: bold;">(Required)</span>
                        </th>
                        <td style="padding: 5px; vertical-align: middle;">
                            @Html.DropDownListFor(m => m.MaritalStatusId, new SelectList(LookupCache.CodeTypeSelectListItems["MaritalStatus"]["CodeDataNameId"], "Value", "Text", Model.MaritalStatusId), "---", new { @class = "form-control", style = "font-size: 12px;" })
                            @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(m => m.CitizenshipId, null, new { @class = "fieldValidationError" }).ToHtmlString()))
                        </td>
                    </tr>
                }
                @if (ArchLibCache.UserProfileMetaDatas.First(x => x.MetaDataName == "DateOfBirth").IsMapped)
                {
                    <tr>
                        <th style="padding: 5px; vertical-align: top;">
                            @Html.LabelFor(m => m.DateOfBirth, new { @class = "col-form-label" })&nbsp;<span style="color: #0000ff; font-weight: bold;">(Required)</span>
                        </th>
                        <td style="padding: 5px; text-align: left;">
                            @Html.TextBoxFor(m => m.DateOfBirth, "{0:MM/dd/yyyy}", new { @class = "datepick form-control", style = "font-size: 12px;" })
                            @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(m => m.DateOfBirth, null, new { id = "fieldValidationError" }).ToHtmlString()))
                        </td>
                    </tr>
                }
                @if (ArchLibCache.UserProfileMetaDatas.First(x => x.MetaDataName == "ElectronicSignatureConsent").IsMapped)
                {
                    <tr>
                        <th colspan="2" style="padding: 5px;">
                            @Html.CheckBoxFor(m => m.ElectronicSignatureConsentAccepted)
                            &nbsp;@Html.LabelFor(m => m.ElectronicSignatureConsentAccepted, new { @class = "col-form-label" })&nbsp;<span style="color: #0000ff; font-weight: bold;">(Required)</span>
                            @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(m => m.ElectronicSignatureConsentAccepted, null, new { @class = "fieldValidationError" }).ToHtmlString()))
                        </th>
                    </tr>
                    <tr>
                        <th style="padding: 5px; vertical-align: top;">
                            @Html.LabelFor(m => m.ElectronicSignatureConsent, new { @class = "col-form-label" })
                        </th>
                        <td style="padding: 5px; vertical-align: top;">
                            @Html.DisplayFor(m => m.ElectronicSignatureConsent, new { @class = "col-form-label" })<br />
                            @Html.TextBoxFor(m => m.ElectronicSignatureConsent, new { @class = "form-control" })
                        </td>
                    </tr>
                }
                @if (ArchLibCache.UserProfileMetaDatas.First(x => x.MetaDataName == "InitialsSignature").IsMapped)
                {
                    <tr>
                        <th style="padding: 5px; vertical-align: top;">
                            @Html.LabelFor(m => m.InitialsTextValue, new { @class = "col-form-label" })&nbsp;<span style="color: #0000ff; font-weight: bold;">(Required)</span>
                        </th>
                        <td style="padding: 5px; vertical-align: top;">
                            @Html.TextBoxFor(m => m.InitialsTextValue, new { @class = "form-control", maxlength = "3", onkeyup = "javascript: InitialsTextValue_onchange(this.value);" })
                            @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(m => m.InitialsTextValue, null, new { @class = "fieldValidationError" }).ToHtmlString()))
                        </td>
                    </tr>
                    <tr>
                        <th style="padding: 5px; vertical-align: top;">
                            @Html.LabelFor(m => m.InitialsTextId, new { @class = "col-form-label" })&nbsp;<span style="color: #0000ff; font-weight: bold;">(Required)</span>
                        </th>
                        <td style="padding: 5px; vertical-align: top;">
                            @{
                                codeDataModels = LookupCache.CodeTypeModels.First(x => x.CodeTypeNameDesc == "InitialsText").CodeDataModelsCodeDataNameId;
                                for (i = 1; i < codeDataModels.Count; i++)
                                {
                                    if (Model.InitialsTextId == codeDataModels[i].CodeDataNameId)
                                    {
                                        checkedValue = "checked=\"checked\"";
                                    }
                                    else
                                    {
                                        checkedValue = "";
                                    }
                                    <input @checkedValue id="InitialsTextId@(i)" name="InitialsTextId" type="radio" value="@codeDataModels[i].CodeDataNameId" /><span>&nbsp;</span><span id="InitialsText@(i)" type="text" style="color: #000000; font-family: @codeDataModels[i].CodeDataNameDesc; font-size: @codeDataModels[i].CodeDataDesc1; font-weight: bold;">@Html.DisplayFor(m => m.InitialsTextValue)</span><br />
                                }
                            }
                            @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(m => m.InitialsTextId, null, new { @class = "fieldValidationError" }).ToHtmlString()))
                        </td>
                    </tr>
                }
            </table>
        </td>
        <td style="padding: 0px; vertical-align: top; width: 6%;"></td>
        <td style="padding: 0px; vertical-align: top; width: 47%;">
            <table style="padding: 0px;">
                @if (ArchLibCache.UserProfileMetaDatas.First(x => x.MetaDataName == "Address").IsMapped)
                {
                    <tr>
                        <th style="padding: 5px; vertical-align: top;">
                            @Html.LabelFor(m => m.HomeDemogInfoAddressModel.DemogInfoCountryId, new { @class = "col-form-label" })&nbsp;<span style="color: #0000ff; font-weight: bold;">(Required)</span>
                        </th>
                        <td style="padding: 5px; text-align: left;">
                            @Html.DropDownListFor(m => m.HomeDemogInfoAddressModel.DemogInfoCountryId, new SelectList(DemogInfoCache.DemogInfoCountrySelectListItems, "Value", "Text", Model.HomeDemogInfoAddressModel.DemogInfoCountryId), "---", new { @class = "form-control", disabled = "disabled", style = "font-size: 12px;" })
                            @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(m => m.HomeDemogInfoAddressModel.DemogInfoCountryId, null, new { @class = "fieldValidationError" }).ToHtmlString()))
                        </td>
                    </tr>
                    <tr>
                        <th style="padding: 5px; vertical-align: top;">
                            @Html.LabelFor(m => m.HomeDemogInfoAddressModel.BuildingTypeId, new { @class = "col-form-label" })&nbsp;<span style="color: #0000ff; font-weight: bold;">(Required)</span>
                        </th>
                        <td style="padding: 5px; text-align: left;">
                            @Html.DropDownListFor(m => m.HomeDemogInfoAddressModel.BuildingTypeId, new SelectList(LookupCache.CodeTypeSelectListItems["BuildingType"]["CodeDataNameId"], "Value", "Text", Model.HomeDemogInfoAddressModel.BuildingTypeId), "---", new { @class = "form-control", style = "font-size: 12px;" })
                            @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(m => m.HomeDemogInfoAddressModel.BuildingTypeId, null, new { @class = "fieldValidationError" }).ToHtmlString()))
                        </td>
                    </tr>
                    <tr>
                        <th style="padding: 5px; vertical-align: top;">
                            @Html.LabelFor(m => m.HomeDemogInfoAddressModel.AddressLine1, new { @class = "col-form-label" })&nbsp;<span style="color: #0000ff; font-weight: bold;">(Required)</span>
                        </th>
                        <td style="padding: 5px; text-align: left;">
                            @Html.TextBoxFor(m => m.HomeDemogInfoAddressModel.AddressLine1, null, new { @class = "form-control", placeholder = "Address line# 1" })
                            @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(m => m.HomeDemogInfoAddressModel.AddressLine1, null, new { @class = "fieldValidationError" }).ToHtmlString()))
                        </td>
                    </tr>
                    <tr>
                        <th style="padding: 5px; vertical-align: top;">
                            @Html.LabelFor(m => m.HomeDemogInfoAddressModel.AddressLine2, new { @class = "col-form-label" })&nbsp;<span style="color: #0000ff; font-weight: bold;">(Required)</span>
                        </th>
                        <td style="padding: 5px; text-align: left;">
                            @Html.TextBoxFor(m => m.HomeDemogInfoAddressModel.AddressLine2, null, new { @class = "form-control", placeholder = "Address line# 2" })
                        </td>
                    </tr>
                    <tr>
                        <th style="padding: 5px; vertical-align: top;">
                            @Html.LabelFor(m => m.HomeDemogInfoAddressModel.DemogInfoSubDivisionId, new { @class = "col-form-label" })&nbsp;<span style="color: #0000ff; font-weight: bold;">(Required)</span>
                        </th>
                        <td style="padding: 5px; text-align: left;">
                            @Html.DropDownListFor(m => m.HomeDemogInfoAddressModel.DemogInfoSubDivisionId, new SelectList(DemogInfoCache.DemogInfoSubDivisionSelectListItems[(long)Model.HomeDemogInfoAddressModel.DemogInfoCountryId], "Value", "Text", Model.HomeDemogInfoAddressModel.DemogInfoSubDivisionId), "---", new { @class = "form-control", style = "float: left; font-size: 12px;" })
                            @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(m => m.HomeDemogInfoAddressModel.DemogInfoSubDivisionId, null, new { @class = "fieldValidationError" }).ToHtmlString()))
                        </td>
                    </tr>
                    <tr>
                        <th style="padding: 5px; vertical-align: top;">
                            @Html.LabelFor(m => m.HomeDemogInfoAddressModel.ZipCode, new { @class = "col-form-label" })&nbsp;<span style="color: #0000ff; font-weight: bold;">(Required)</span>
                        </th>
                        <td style="padding: 5px; text-align: left;">
                            @Html.TextBoxFor(m => m.HomeDemogInfoAddressModel.ZipCode, null, new { @class = "form-control", placeholder = "Zip Code" })
                            @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(m => m.HomeDemogInfoAddressModel.ZipCode, null, new { @class = "fieldValidationError" }).ToHtmlString()))
                        </td>
                    </tr>
                    <tr>
                        <th style="padding: 5px; vertical-align: top;">
                            @Html.LabelFor(m => m.HomeDemogInfoAddressModel.CityName, new { @class = "col-form-label" })&nbsp;<span style="color: #0000ff; font-weight: bold;">(Required)</span>
                        </th>
                        <td style="padding: 5px; text-align: left;">
                            @Html.TextBoxFor(m => m.HomeDemogInfoAddressModel.CityName, null, new { @class = "form-control", placeholder = "City" })
                            @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(m => m.HomeDemogInfoAddressModel.CityName, null, new { @class = "fieldValidationError" }).ToHtmlString()))
                        </td>
                    </tr>
                }
                @if (ArchLibCache.UserProfileMetaDatas.First(x => x.MetaDataName == "Telephone").IsMapped)
                {
                    <tr>
                        <th style="padding: 5px; vertical-align: top;">
                            @Html.LabelFor(m => m.AspNetUserModel.PhoneNumber, new { @class = "col-form-label" })&nbsp;<span style="color: #0000ff; font-weight: bold;">(Required)</span>
                        </th>
                        <td style="padding: 5px; text-align: left;">
                            <table style="padding: 0px;">
                                <tr>
                                    <td style="padding-right: 9px; text-align: left; width: 36%;">
                                        @Html.DropDownListFor(m => m.AspNetUserModel.TelephoneCountryId, new SelectList(ArchitectureLibraryCacheData.DemogInfoCache.DemogInfoCountrySelectListItemsName, "Value", "Text", Model.AspNetUserModel.TelephoneCountryId), "---", new { @class = "form-control", style = "float: left; font-size: 14px;" })
                                        @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(m => m.AspNetUserModel.TelephoneCountryId, "", new { id = "TelephoneCountryId-error", style = "float: left; width: 36%;" }).ToHtmlString()))
                                    </td>
                                    <td style="text-align: left; width: 9%;">
                                        +@ArchitectureLibraryCacheData.DemogInfoCache.DemogInfoCountryModels.FirstOrDefault(x => x.DemogInfoCountryId == Model.AspNetUserModel.TelephoneCountryId).TelephoneCode
                                    </td>
                                    <td style="text-align: left; width: 45%;">
                                        @Html.TextBoxFor(m => m.AspNetUserModel.PhoneNumber, null, new { @class = "form-control", @maxlength = "10", oninput = "javascript: return checkMaxLength(this);", onkeydown = "javascript: return checkMaxLength(this);", onkeypress = "javascript: return isInputNumber(event);", onkeyup = "javascript: return checkMaxLength(this);", placeholder = "Telephone#", @type = "text" })
                                        @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(m => m.AspNetUserModel.PhoneNumber, null, new { @class = "PhoneNumber-error" }).ToHtmlString()))
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                }
                @if (ArchLibCache.UserProfileMetaDatas.First(x => x.MetaDataName == "SSN").IsMapped)
                {
                    <tr>
                        <th style="padding: 5px; vertical-align: top;">
                            @Html.LabelFor(m => m.SSN, new { @class = "col-form-label" })&nbsp;<span style="color: #0000ff; font-weight: bold;">(Required)</span>
                        </th>
                        <td style="padding: 5px; text-align: left;">
                            @Html.TextBoxFor(m => m.SSN, null, new { @class = "form-control", @maxlength = "9", oninput = "javascript: return checkMaxLength(this);", onkeydown = "javascript: return checkMaxLength(this);", onkeypress = "javascript: return isInputNumber(event);", onkeyup = "javascript: return checkMaxLength(this);", placeholder = "SSN#", @type = "text" })
                            @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(m => m.SSN, null, new { @class = "fieldValidationError" }).ToHtmlString()))
                        </td>
                    </tr>
                }
                @if (ArchLibCache.UserProfileMetaDatas.First(x => x.MetaDataName == "DriverLicense").IsMapped)
                {
                    <tr>
                        <td colspan="2" style="padding: 0px; width: 100%;">
                            <table style="padding: 0px;">
                                <colgroup>
                                    <col style="width: 12%;" />
                                    <col style="width: 33%;" />
                                    <col style="width: 33%;" />
                                    <col style="width: 22%;" />
                                </colgroup>
                                <tr>
                                    <th colspan="4" style="padding: 0px; text-align: center;">
                                        Driver License<span class="col-form-label" style="color: #0000ff; font-weight: bold; padding-left: 5px;">(Required)</span>
                                    </th>
                                </tr>
                                <tr>
                                    <th style="padding: 5px; vertical-align: top;">
                                        <span class="col-form-label" style="color: #000000; font-weight: bold;">Class</span>
                                    </th>
                                    <th style="padding: 5px; vertical-align: top;">
                                        <span class="col-form-label" style="color: #000000; font-weight: bold;">License#</span>
                                    </th>
                                    <th style="padding: 5px; vertical-align: top;">
                                        <span class="col-form-label" style="color: #000000; font-weight: bold;">State</span>
                                    </th>
                                    <th style="padding: 5px; vertical-align: top;">
                                        <span class="col-form-label" style="color: #000000; font-weight: bold;">Expiry</span>
                                    </th>
                                </tr>
                                <tr>
                                    <td style="padding: 5px; vertical-align: top;">
                                        @Html.TextBoxFor(m => m.DriverLicenseType, new { @class = "form-control", @maxlength = "5", style = "font-size: 12px; text-transform: uppercase;", autocomplete = "off" })
                                        @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(m => m.DriverLicenseType, null, new { @class = "fieldValidationError" }).ToHtmlString()))
                                    </td>
                                    <td style="padding: 5px; vertical-align: top;">
                                        @Html.TextBoxFor(m => m.DriverLicenseNumber, new { @class = "form-control", @maxlength = "15", style = "font-size: 12px; text-transform: uppercase;", autocomplete = "off" })
                                        @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(m => m.DriverLicenseNumber, null, new { @class = "fieldValidationError" }).ToHtmlString()))
                                    </td>
                                    <td style="padding: 5px; vertical-align: top;">
                                        @Html.DropDownListFor(m => m.DriverLicenseDemogInfoSubDivisionId, new SelectList(DemogInfoCache.DemogInfoSubDivisionSelectListItems[(long)Model.HomeDemogInfoAddressModel.DemogInfoCountryId], "Value", "Text", Model.DriverLicenseDemogInfoSubDivisionId), "---", new { @class = "form-control", style = "font-size: 12px;" })
                                        @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(m => m.DriverLicenseDemogInfoSubDivisionId, null, new { @class = "fieldValidationError" }).ToHtmlString()))
                                    </td>
                                    <td style="padding: 5px; vertical-align: top;">
                                        @Html.TextBoxFor(m => m.DriverLicenseExpiryDate, "{0:MM/dd/yyyy}", new { @class = "datepick form-control", style = "font-size: 12px;" })
                                        @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(m => m.DriverLicenseExpiryDate, null, new { @class = "fieldValidationError" }).ToHtmlString()))
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                }
                @if (ArchLibCache.UserProfileMetaDatas.First(x => x.MetaDataName == "InitialsSignature").IsMapped)
                {
                    <tr>
                        <th style="padding: 5px; vertical-align: top;">
                            @Html.LabelFor(m => m.SignatureTextValue, new { @class = "col-form-label" })&nbsp;<span style="color: #0000ff; font-weight: bold;">(Required)</span>
                        </th>
                        <td style="padding: 5px; vertical-align: top;">
                            @Html.TextBoxFor(m => m.SignatureTextValue, new { @class = "form-control", maxlength = "200", onkeyup = "javascript: SignatureTextValue_onchange(this.value);" })
                            @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(m => m.SignatureTextValue, null, new { @class = "fieldValidationError" }).ToHtmlString()))
                        </td>
                    </tr>
                    <tr>
                        <th style="padding: 5px; vertical-align: top;">
                            @Html.LabelFor(m => m.SignatureTextId, new { @class = "col-form-label" })&nbsp;<span style="color: #0000ff; font-weight: bold;">(Required)</span>
                        </th>
                        <td style="padding: 5px; vertical-align: top;">
                            @{
                                codeDataModels = LookupCache.CodeTypeModels.First(x => x.CodeTypeNameDesc == "SignatureText").CodeDataModelsCodeDataNameId;
                                for (i = 1; i < codeDataModels.Count; i++)
                                {
                                    if (Model.SignatureTextId == codeDataModels[i].CodeDataNameId)
                                    {
                                        checkedValue = "checked=\"checked\"";
                                    }
                                    else
                                    {
                                        checkedValue = "";
                                    }
                                    <input @checkedValue id="SignatureTextId@(i)" name="SignatureTextId" type="radio" value="@codeDataModels[i].CodeDataNameId" /><span>&nbsp;</span><span id="SignatureText@(i)" type="text" style="color: #000000; font-family: @codeDataModels[i].CodeDataNameDesc; font-size: @codeDataModels[i].CodeDataDesc1; font-weight: bold;">@Html.DisplayFor(m => m.SignatureTextValue)</span><br />
                                }
                            }
                            @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(m => m.SignatureTextId, null, new { id = "fieldValidationError" }).ToHtmlString()))
                        </td>
                    </tr>
                }
                @if (ArchLibCache.UserProfileMetaDatas.First(x => x.MetaDataName == "CertificateDocument").IsMapped)
                {
                    <tr>
                        <th style="vertical-align: top;">
                            @Html.LabelFor(m => m.CertificateDocumentHttpPostedFileBase, new { @class = "col-form-label" })<br /><span style="color: #0000ff; font-weight: bold;">(Required)</span>
                        </th>
                        <td style="vertical-align: top;">
                            @Html.TextBoxFor(m => m.CertificateDocumentHttpPostedFileBase, new { @class = "form-control validate", oninput = "javascript: return httpPostedFileBase_oninput(this.files, 'imgCertificateDocumentUploadNew');", placeholder = "Enter " + @Html.DisplayNameFor(m => m.CertificateDocumentHttpPostedFileBase), type = "file" })
                            @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(m => m.CertificateDocumentHttpPostedFileBase, "", new { @class = "fieldValidationError" }).ToHtmlString()))
                            @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(m => m.CertificateDocumentModel.ServerFileName, "", new { @class = "fieldValidationError" }).ToHtmlString()))
                            <button onclick="javascript: return httpPostedFileBase_reset('CertificateDocumentHttpPostedFileBase', 'imgCertificateDocumentUploadNew');">Remove Image</button>
                        </td>
                    </tr>
                    <tr>
                        <th style="vertical-align: top;">
                            Existing
                        </th>
                        <th style="vertical-align: top;">
                            New
                        </th>
                    </tr>
                    <tr>
                        <td style="vertical-align: top;">
                            <img alt="@Model.CertificateDocumentHttpPostedFileBase Exisitng Image" class="img-responsive" id="imgCertificateDocumentUploadExisting" src="~/Documents/Images/@Model.CertificateDocumentModel.ServerFileName" style="height: 180px; width: 180px;" title="@Model.CertificateDocumentHttpPostedFileBase - Existing Image" />
                        </td>
                        <td style="vertical-align: top;">
                            <img alt="@Model.CertificateDocumentHttpPostedFileBase Preview of new image" class="img-responsive" id="imgCertificateDocumentUploadNew" src="" style="height: 180px; width: 180px;" title="@Model.CertificateDocumentHttpPostedFileBase Preview of your image" />
                        </td>
                    </tr>
                }
            </table>
        </td>
    </tr>
</table>
<br style="clear: both;" />
