@model ArchitectureLibraryModels.LoginUserProfModel
<style>
    #LoginEmailAddress-error, #LoginPassword-error, #CaptchaAnswerLogin-error {
        color: #ff0000;
        display: block;
        font-size: 14px;
        font-weight: bold;
    }
</style>
@{
    if (Model != null && Model.ResponseObjectModel != null && !string.IsNullOrWhiteSpace(Model.ResponseObjectModel.ValidationSummaryMessage))
    {
        <div class="row validationSummaryMessage">
            @Model.ResponseObjectModel.ValidationSummaryMessage
        </div>
    }
    if (!ViewData.ModelState.IsValid)
    {
        <div class="row">
            @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationSummary(false, "", new { @class = "validationSummaryErrors" }).ToHtmlString()))
        </div>
    }
    @*if (Model != null && Model.ResponseObjectModel != null)
        {
            <div class="row" id="divLoginUserProfResponseObject">
                @Html.Partial("_ResponseObject", Model.ResponseObjectModel)
            </div>
        }*@
    bool mobileDevice = Request.Browser.IsMobileDevice;
    string paddingLeft;
    if (mobileDevice)
    {
        paddingLeft = "9px;";
    }
    else
    {
        paddingLeft = "0px;";
    }
}
<div class="row" style="padding-left: @paddingLeft; text-align: left;">
    @Html.LabelFor(m => m.LoginEmailAddress, new { @class = "col-form-label" })&nbsp;<span style="color: #0000ff; font-weight: bold;">(Required)</span>
    @Html.TextAreaFor(m => m.LoginEmailAddress, new { @class = "form-control", placeholder = @Html.DisplayNameFor(m => m.LoginEmailAddress), style = "height: 32px; overflow: hidden; resize: none; width: 81%;" })
    @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(m => m.LoginEmailAddress, "", new { id = "LoginEmailAddress-error" }).ToHtmlString()))
</div>
<div class="row" style="padding-left: @paddingLeft; text-align: left;">
    @Html.LabelFor(m => m.LoginPassword, new { @class = "col-form-label" })&nbsp;<span style="color: #0000ff; font-weight: bold;">(Required)</span>
    <div>
        @Html.TextBoxFor(m => m.LoginPassword, new { @class = "form-control validate", placeholder = "Enter " + @Html.DisplayNameFor(m => m.LoginPassword), style = "float: left; width: 65%;", @type = "password" })
        <span style="width: 18px;">&nbsp;</span>
        <button class="btn btn-primary" id="btnLoginPassword" onmouseout="javascript: return showHideForHide('LoginPassword', 'password');" onmouseover="javascript: return showHideForShow('LoginPassword', 'text');" type="button" style="width: 50px;">
            <span class="fa fa-eye-slash icon"></span>
        </button>
    </div>
    @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(m => m.LoginPassword, "", new { id = "LoginPassword-error" }).ToHtmlString()))
</div>
<div class="row" style="padding-left: @paddingLeft; text-align: left;">
    @Html.LabelFor(m => m.CaptchaAnswerLogin, new { @class = "col-form-label" })&nbsp;- Sum of <span style="color: #ff0000; font-weight: bold;">@Model.CaptchaNumberLogin0</span> & <span style="color: #ff0000; font-weight: bold;">@Model.CaptchaNumberLogin1</span><span style="color: #0000ff; font-weight: bold;">? (Required)</span>
    @Html.TextBoxFor(m => m.CaptchaAnswerLogin, null, new { @class = "form-control", placeholder = @Model.CaptchaNumberLogin0 + " + " + @Model.CaptchaNumberLogin1 + " =?", style = "width: 90%;" })
    @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(m => m.CaptchaAnswerLogin, "", new { id = "CaptchaAnswerLogin-error" }).ToHtmlString()))
</div>
