@model OrderCategoryItemModel
@using ArchitectureLibraryCacheData
@using RetailSlnEnumerations
@using RetailSlnCacheData
@using RetailSlnModels
@{
    @BuildOrderCategoryItemHier(Model.ParentCategoryId)
}
@helper BuildOrderCategoryItemHier(long parentCategoryId)
{
    long clientId = ArchLibCache.ClientId;
    string clientName = ArchLibCache.ClientName;
    CategoryLayoutModel categoryLayoutModel = RetailSlnCache.CategoryLayoutModels[parentCategoryId];
    int pageSize = Model.PageSize;
    int startIndex = (Model.PageNum - 1) * pageSize;
    int itemSeqNum = startIndex + 1;
    int totalRowCount = categoryLayoutModel.CategoryItemMasterHierModels.Count;
    if (categoryLayoutModel.CategoryItemMasterHierModels.Count == 0)
    {
        <div style="color: #ff0000; font-size: 18px; font-weight: bold;">This category has no items at this time</div>
    }
    else
    {
        if (categoryLayoutModel.CategoryItemMasterHierModels[0].ItemMasterId == null)
        {
            totalRowCount--;
            startIndex++;
        }
        int pageCount = totalRowCount / pageSize;
        if (totalRowCount % Model.PageSize != 0)
        {
            pageCount++;
        }
        Model.TotalRowCount = totalRowCount;
        List<CategoryItemMasterHierModel> categoryItemHierModels = categoryLayoutModel.CategoryItemMasterHierModels.Skip(startIndex).Take(pageSize).ToList();
        if (categoryLayoutModel.CategoryItemMasterHierModels[0].ItemMasterId == null)
        {
            categoryItemHierModels.Insert(0, categoryLayoutModel.CategoryItemMasterHierModels[0]);
        }
        var paymentInfoModel = (PaymentInfo1Model)Session["PaymentInfo"];
        paymentInfoModel = paymentInfoModel ?? new PaymentInfo1Model();
        paymentInfoModel.ShoppingCartModel = paymentInfoModel.ShoppingCartModel ?? new ShoppingCartModel();
        paymentInfoModel.ShoppingCartModel.BackToTop = true;
        paymentInfoModel.ShoppingCartModel.Checkout = true;
        paymentInfoModel.ShoppingCartModel.ShoppingCartSummaryModel = paymentInfoModel.ShoppingCartModel.ShoppingCartSummaryModel ?? new ShoppingCartSummaryModel();
        //paymentInfoModel.ShoppingCartModel.ShoppingCartSummaryModel = new ShoppingCartSummaryModel();
        paymentInfoModel.ShoppingCartModel.ShoppingCartItems = paymentInfoModel.ShoppingCartModel.ShoppingCartItems ?? new List<ShoppingCartItemModel>();
        paymentInfoModel.ShoppingCartModel.ShoppingCartSummaryItems = paymentInfoModel.ShoppingCartModel.ShoppingCartSummaryItems ?? new List<ShoppingCartItemModel>();
        for (int i = 1; i < paymentInfoModel.ShoppingCartModel.ShoppingCartSummaryItems.Count; i++)
        {
            paymentInfoModel.ShoppingCartModel.ShoppingCartSummaryItems.RemoveAt(1);
        }
        foreach (var shoppingCartItem in paymentInfoModel.ShoppingCartModel.ShoppingCartItems)
        {
            shoppingCartItem.ShoppingCartItemSummarys = new List<ShoppingCartItemModel>();
        }
        @Html.HiddenFor(m => m.ParentCategoryId)
        @Html.HiddenFor(m => m.PageNum)
        @Html.HiddenFor(m => m.PageSize)
        @Html.HiddenFor(m => m.TotalRowCount)
        if (Model.ParentCategoryId != 0)
        {
            @BuildPaginationLinks(pageCount)
            <br style="clear: both;" />
        }
        @BuildOrderCategoryItem(paymentInfoModel, categoryItemHierModels, itemSeqNum)
        if (Model.ParentCategoryId != 0)
        {
            <br style="clear: both;" />
            @BuildPaginationLinks(pageCount)
        }
        <div id="divShoppingCart" style="margin-left: auto; margin-right: auto; width: 72%;">
            @Html.Partial("_ShoppingCart", paymentInfoModel.ShoppingCartModel)
        </div>
    }
}@*helper BuildOrderCategoryItemHier(long parentCategoryId)*@
@helper BuildPaginationLinks(int pageCount)
{
    string baseUrl = Url.Action(Model.ActionName, Model.ControllerName);
    <ul class="pagination">
        @if (Model.PageNum == 1)
        {
            <li class="page-item">
                <span class="page-link">Prev</span>
            </li>
        }
        else
        {
            <li class="page-item">
                <a alt="Page# @(Model.PageNum - 1)" class="page-link" href="javascript: void(0);" onclick="javascript: return categoryId_onclick(@Model.ParentCategoryId, @(Model.PageNum - 1), '@baseUrl');" , title="Jump to page# @(Model.PageNum - 1)">
                    Prev
                </a>
            </li>
        }
        @for (int i = 1; i <= pageCount; i++)
        {
            if (i == Model.PageNum)
            {
                <li class="page-item active">
                    <a alt="Page# @i" class="page-link" href="javascript: void(0);" onclick="javascript: return categoryId_onclick(@Model.ParentCategoryId, @i, '@baseUrl');" , title="Jump to page# @i">
                        @i
                    </a>
                </li>
            }
            else
            {
                <li class="page-item">
                    <a alt="Page# @i" class="page-link" href="javascript: void(0);" onclick="javascript: return categoryId_onclick(@Model.ParentCategoryId, @i, '@baseUrl');" , title="Jump to page# @i">
                        @i
                    </a>
                </li>
            }
        }
        @if (Model.PageNum == pageCount)
        {
            <li class="page-item">
                <span class="page-link">Next</span>
            </li>
            @*<li class="page-item">
                    <span class="page-link">Last</span>
                </li>*@
        }
        else
        {
            <li class="page-item">
                <a alt="Page# @(Model.PageNum - 1)" class="page-link" href="javascript: void(0);" onclick="javascript: return categoryId_onclick(@Model.ParentCategoryId, @(Model.PageNum + 1), '@baseUrl');" , title="Jump to page# @(Model.PageNum + 1)">
                    Next
                </a>
            </li>
        }
    </ul>
}
@helper BuildOrderCategoryItem(PaymentInfo1Model paymentInfoModel, List<CategoryItemMasterHierModel> categoryItemMasterHierModels, int itemSeqNum)
{
    long clientId = ArchLibCache.ClientId;
    string clientName = ArchLibCache.ClientName;
    string categoryOrItem, imageDivWidth, imageHeight, imageWidth;
    int categoryCountIndex = 0, categoryCountPerRow = 3;
    int imageIndex = -1, imageCountIndex = 0, imageCountPerRow;
    List<CategoryItemMasterHierModel> categoryItemHierModelsRecursive;
    CategoryLayoutModel categoryLayoutModel;
    foreach (var categoryItemMasterHierModel in categoryItemMasterHierModels)
    {
        categoryOrItem = categoryItemMasterHierModel.CategoryOrItem;
        imageDivWidth = ArchLibCache.GetApplicationDefault(clientId, "OrderProcess", categoryOrItem + "ImageDivWidth");
        imageHeight = ArchLibCache.GetApplicationDefault(clientId, "OrderProcess", categoryOrItem + "ImageHeight");
        imageWidth = ArchLibCache.GetApplicationDefault(clientId, "OrderProcess", categoryOrItem + "ImageWidth");
        imageCountPerRow = int.Parse(ArchLibCache.GetApplicationDefault(clientId, "OrderProcess", categoryOrItem + "ImageCountPerRow"));

        //New code
        if (categoryItemMasterHierModel.ProcessType == "Recursive")
        {
            categoryLayoutModel = RetailSlnCache.CategoryLayoutModels[categoryItemMasterHierModel.CategoryModel.CategoryId.Value];
            categoryItemHierModelsRecursive = categoryLayoutModel.CategoryItemMasterHierModels;
            <br style="clear: both;" />
            @BuildOrderCategoryItem(paymentInfoModel, categoryItemHierModelsRecursive, itemSeqNum)
        }//if (categoryItemHierModel.ProcessType == "Recursive")
        else
        {
            if (categoryItemMasterHierModel.ProcessType == "ParentCategoryName")
            {
                <a href="@Url.Action("Index", "Home")" style="color: #000000; padding: 18px;" title="Return to categories">
                    <i class="fa fa-arrow-circle-left" style="font-size: 36px;"></i>
                </a>
                <span style="color: #a54000; font-family: 'Comic Sans MS'; font-size: 27px; font-weight: bold; letter-spacing: 4px; padding-left: 18px; padding-right: 18px; text-align: center; text-transform: uppercase;">@categoryItemMasterHierModel.ParentCategoryModel.CategoryDesc</span>
                <br style="clear: both;" />
            }//if (categoryItemHierModel.ProcessType == "ParentCategoryName")
            else
            {
                if (categoryItemMasterHierModel.CategoryId != null)
                {
                    categoryCountIndex++;
                    <div style="border-radius: 25px; color: #000000; display: inline-block; font-size: 20px; font-weight: bold; padding: 18px;">
                        @BuildCategory(categoryItemMasterHierModel.CategoryModel, imageDivWidth, imageHeight, imageWidth, clientId, clientName, categoryOrItem)
                    </div>
                }//if (categoryItemHierModel.CategoryId != null)
                else
                {
                    imageIndex++;
                    imageCountIndex++;
                    <div style="display: inline-block; padding: 18px; vertical-align: top; width: @imageDivWidth;">
                        @BuildItem(paymentInfoModel, categoryItemMasterHierModel.ItemMasterModel, itemSeqNum++, imageIndex, imageDivWidth, imageHeight, imageWidth, clientId, clientName, categoryOrItem)
                    </div>
                }//else (categoryItemHierModel.CategoryId != null)
            }//else (categoryItemHierModel.ProcessType == "ParentCategoryName")
        }//else (categoryItemHierModel.ProcessType == "Recursive")
        if (categoryCountIndex == categoryCountPerRow)
        {
            <br style="clear: both;" />
            categoryCountIndex = 0;
        }//if (categoryCountIndex == categoryCountPerRow)
        if (imageCountIndex == imageCountPerRow)
        {
            <br style="clear: both;" />
            imageCountIndex = 0;
        }//if (imageCountIndex == imageCountPerRow)
    }//foreach (var categoryItemHierModel in categoryItemHierModels)
}@*helper BuildOrderCategoryItem(List<CategoryItemHierModel> categoryItemHierModels)*@
@helper BuildCategory(CategoryModel categoryModel, string imageDivWidth, string imageHeight, string imageWidth, long clientId, string clientName, string categoryOrItem)
{
    <a href="javascript: void(0);" onclick="javascript: return categoryId_onclick(@categoryModel.CategoryId, 1, '')" style="color: #000000; text-decoration: underline;">
        <img class="img-responsive" src="~/ClientSpecific/@(clientId)_@(clientName)/Documents/Images/Category/@categoryModel.ImageName" style="border-radius: 25px; height: @imageHeight; width: @imageWidth;" />
        <div style="color: #000000; font-size: 16px; font-weight: 900; text-align: center; width: 100%;">
            @categoryModel.CategoryDesc
        </div>
    </a>
}
@helper BuildItem(PaymentInfo1Model paymentInfoModel, ItemMasterModel itemMasterModel, int itemSeqNum, int imageIndex, string imageDivWidth, string imageHeight, string imageWidth, long clientId, string clientName, string categoryOrItem)
{
    string defaultOrderQty = ArchLibCache.GetApplicationDefault(clientId, "OrderProcess", "DefaultOrderQty");
    var shoppingCartItems = paymentInfoModel.ShoppingCartModel.ShoppingCartItems;
    ShoppingCartItemModel shoppingCartItemModel;
    <a href="@Url.Action("ItemAttributes", "Home", new { id = itemMasterModel.ItemMasterId, tabId = 0 })" target="_blank" title="View specifications, images, bundle - @itemMasterModel.ItemMasterDesc">
        <img alt="@itemMasterModel.ImageTitle" class="img-responsive" src="~/ClientSpecific/@(clientId)_@(clientName)/Documents/Images/ItemMaster/@itemMasterModel.ImageName" style="border-radius: 25px; height: auto; max-height: @imageHeight; max-width: @imageWidth; width: 100%;" title="@(itemMasterModel.ImageTitle + " " + itemSeqNum)" />
    </a>
    if (itemMasterModel.ItemTypeId == ItemTypeEnum.ItemBundle)
    {
        <div style="position: relative;">
            <div style="bottom: 1px; right: 2px; position: absolute;">
                <a href="@Url.Action("ItemAttributes", "Home", new { id = itemMasterModel.ItemMasterId, tabId = 3 })" style="background-color: #000000; border-style: none; color: #ffffff; font-family: Arial; font-size: 12px; font-weight: 600; padding: 3px;" target="_blank" title="@itemMasterModel.ImageTitle">Item Bundle&nbsp;</a>
            </div>
        </div>
    }
    <br style="clear: both;" />
    <br style="clear: both;" />
    <div style="text-align: left;">
        <span style="color: #1d1d1d; font-family: Arial; font-size: 16px; font-style: normal; font-weight: 400; line-height: 21px;">
            @if (itemMasterModel.ItemModels.Count == 1)
            {
                @(itemMasterModel.ItemModels[0].ItemRateFormatted + " - ")
            }
            @(itemMasterModel.ItemMasterDesc0 + " " + itemMasterModel.ItemMasterDesc1)
        </span>
        @if (!string.IsNullOrWhiteSpace(itemMasterModel.ItemMasterDesc2 + " " + itemMasterModel.ItemMasterDesc3))
        {
            <br style="clear: both;" />
            <span style="color: #1d1d1d; font-family: Arial; font-size: 12px; font-style: normal; font-weight: 600; line-height: 18px;">@(itemMasterModel.ItemMasterDesc2 + " " + itemMasterModel.ItemMasterDesc3)</span>
        }
    </div>
    if (itemMasterModel.ItemTypeId == ItemTypeEnum.ItemBundle)
    {
        <a href="@Url.Action("ItemAttributes", "Home", new { id = itemMasterModel.ItemMasterId, tabId = 3 })" style="color: #000000; font-size: 12px; font-weight:bold; padding-right: 3px; text-decoration: underline;" target="_blank" title="View items in the bundle - @itemMasterModel.ItemMasterDesc">Bundle</a>
    }
    <a href="@Url.Action("ItemAttributes", "Home", new { id = itemMasterModel.ItemMasterId, tabId = 0 })" style="color: #ff0000; font-size: 12px; font-weight:bold; text-decoration: underline;" target="_blank" title="View specifications - @itemMasterModel.ItemMasterDesc">Spec(s)</a>
    <a href="@Url.Action("ItemAttributes", "Home", new { id = itemMasterModel.ItemMasterId, tabId = 2 })" style="color: #0000ff; font-size: 12px; font-weight:bold; padding-left: 3px; text-decoration: underline;" target="_blank" title="View more images - @itemMasterModel.ItemMasterDesc">Image(s)</a>
    if (itemMasterModel.ItemModels[0].ItemStatusId == ItemStatusEnum.OutOfStock)
    {
        <br style="clear: both;" />
        <br style="clear: both;" />
        <span style="color: #000000; font-size: 17px; font-weight: 900;">SOLD OUT</span>
    }//if (itemModel.ItemStatusId == ItemStatusEnum.OutOfStock)
    else
    {
        bool brFlag = false;
        int index = 0;
        string prefixString = "", optionText;
        <br style="clear: both;" />
        if (itemMasterModel.ItemMasterItemSpecModels != null && itemMasterModel.ItemMasterItemSpecModels.Count > 0)
        {
            <span style="color: #000000; font-size: 11px; font-weight: 600;">
                @foreach (var itemMasterItemSpecModel in itemMasterModel.ItemMasterItemSpecModels)
                {
                    @(prefixString + ++index + ". " + itemMasterItemSpecModel.ItemSpecValueForDisplay)
                    prefixString = " | ";
                    brFlag = true;
                }
            </span>
        }
        if (itemMasterModel.ItemModels.Count == 1)
        {
            if (itemMasterModel.ItemModels[0].ItemItemSpecModels.Count > 0)
            {
                <span style="color: #000000; font-size: 11px; font-weight: 600;">
                    @foreach (var itemItemSpecModel in itemMasterModel.ItemModels[0].ItemItemSpecModels)
                    {
                        @(prefixString + ++index + ". " + itemItemSpecModel.ItemSpecValueForDisplay)
                        prefixString = " | ";
                        brFlag = true;
                    }
                </span>
            }
        }
        if (brFlag)
        {
            <br style="clear: both;" />
        }
        <div style="font-size: 12px; font-weight: bold; height: 40px; padding-right: 5px; padding-top: 8px; vertical-align: middle;">
            <input class="form-control" id="orderQty@(imageIndex)" inputmode="numeric" max="9999" maxlength="4" min="1" oninput="javascript: return orderQty_oninput(@(imageIndex));" style="background-color: #e1e1e1; border-color: #000000; border-style: none; border-width: 1px; border-radius: 30px; float: left; font-size: 12px; font-weight: 900; width: 72px;" title="Enter quantity and click add to cart @itemMasterModel.ImageTitle" type="number" value="@defaultOrderQty" />
            @if (defaultOrderQty == "")
            {
                <a href="javascript: void(0);" onclick="javascript: return addToCart_onclick(@Model.ParentCategoryId, @Model.PageNum, @Model.PageSize, @Model.TotalRowCount, @imageIndex);" style="float: left;" title="Enter quantity and click add to cart @itemMasterModel.ItemMasterDesc"><img alt="Enter quantity and click add to cart" src="~/Images/Addtocart.png" style="height: 36px; padding-left: 4px; width: 45px;" title="Enter quantity and click add to cart @itemMasterModel.ItemModels[0].ImageTitle" /></a>
            }
            else
            {
                <a href="javascript: void(0);" onclick="javascript: return addToCartGet_onclick(@imageIndex, '@defaultOrderQty', @Model);" style="float: left;" title="Enter quantity and click add to cart @itemMasterModel.ItemMasterDesc"><img alt="Enter quantity and click add to cart" src="~/Images/Addtocart.png" style="height: 36px; padding-left: 4px; width: 45px;" title="Enter quantity and click add to cart @itemMasterModel.ImageTitle" /></a>
            }
        </div>
        <br style="clear: both;" />
        shoppingCartItemModel = shoppingCartItems?.FirstOrDefault(x => x.ItemId == itemMasterModel.ItemModels[0].ItemId);
        <span style="font-family: Arial; font-size: 12px; font-weight: bold;">
            <i class="fa fa-remove" id="spnMessageRemove@(imageIndex)" style="color: #ff0000; display: none; padding-left: 7px; padding-right: 1px;"></i>
            <span id="spnMessageError@(imageIndex)" style="color: #ff0000; display: none; font-size: 12px; padding-right: 5px;">Error???</span>
        </span>
        if (itemMasterModel.ItemModels.Count > 1)
        {
            <span id="spnMessageItem@(imageIndex)" style="color: #0000ff; font-family: Arial; font-size: 12px; font-weight: bold;">
                Select item from below
                <br style="clear: both;">
            </span>
            <div class="dropdown">
                <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenuButton@(imageIndex)" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" style="color: #a50040; font-family: Arial; font-size: 12px; font-weight: bold;">
                    --- Item(s) ---<span class="caret" style="color: #000000; font-size: 20px;">&nbsp;&nbsp;&nbsp;</span>
                </button>
                <table class="dropdown-menu" aria-labelledby="dropdownMenuButton@(imageIndex)" style="font-size: 12px; width: 100%;">
                    <tr>
                        <th style="border-collapse: collapse; border-color: #000000; border-style: solid; border-width: 1px; padding: 3px;">Rate</th>
                        <th style="border-collapse: collapse; border-color: #000000; border-style: solid; border-width: 1px; padding: 3px; width: 100%;">Spec(s)</th>
                    </tr>
                    @foreach (var itemModel in itemMasterModel.ItemModels)
                    {
                        <tr>
                            @{
                                optionText = "";
                                if (itemModel.ItemItemSpecModels != null && itemModel.ItemItemSpecModels.Count > 0)
                                {
                                    prefixString = "";
                                    foreach (var itemItemSpecModel in itemModel.ItemItemSpecModels)
                                    {
                                        optionText += prefixString + itemItemSpecModel.ItemSpecValueForDisplay;
                                        prefixString = " | ";
                                    }
                                }
                            }
                            <td class="text-right" style="border-collapse: collapse; border-color: #000000; border-style: solid; border-width: 1px; padding: 3px;"><a href="javascript: void(0);" onclick="javascript: return tempFunction('@itemModel.ItemId', '@itemModel.ItemRateFormatted', '@optionText', '@imageIndex');" style="font-weight: bold; text-decoration: underline;">@itemModel.ItemRateFormatted</a></td>
                            <td style="border-collapse: collapse; border-color: #000000; border-style: solid; border-width: 1px; font-size: 11px; font-weight: 600; padding: 3px;">
                                @optionText
                            </td>
                        </tr>
                    }
                </table>
            </div>
            <span id="itemId@(imageIndex)" style="display: none;"></span>
        }
        else
        {
            <span id="itemId@(imageIndex)" style="display: none;">@itemMasterModel.ItemModels[0].ItemId</span>
        }
    }//else (itemModel.ItemStatusId == ItemStatusEnum.OutOfStock)
    @*<br style="clear: both;" />*@
}
