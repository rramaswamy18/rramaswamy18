@model OrderCategoryItemModel
@using ArchitectureLibraryCacheData
@using RetailSlnEnumerations
@using RetailSlnCacheData
@using RetailSlnModels
@{
    @BuildOrderCategoryItemHier(Model.ParentCategoryId)
}
@helper BuildOrderCategoryItemHier(long parentCategoryId)
{
    long clientId = ArchLibCache.ClientId;
    string clientName = ArchLibCache.ClientName;
    CategoryLayoutModel categoryLayoutModel = RetailSlnCache.CategoryLayoutModels[parentCategoryId];
    int pageSize = Model.PageSize;
    int startIndex = (Model.PageNum - 1) * pageSize;
    int totalRowCount = categoryLayoutModel.CategoryItemHierModels.Count;
    if (categoryLayoutModel.CategoryItemHierModels.Count == 0)
    {
        <div style="color: #ff0000; font-size: 18px; font-weight: bold;">This category has no items at this time</div>
    }
    else
    {
        if (categoryLayoutModel.CategoryItemHierModels[0].ItemId == null)
        {
            totalRowCount--;
            startIndex++;
        }
        int pageCount = totalRowCount / pageSize;
        if (totalRowCount % Model.PageSize != 0)
        {
            pageCount++;
        }
        Model.TotalRowCount = totalRowCount;
        List<CategoryItemHierModel> categoryItemHierModels = categoryLayoutModel.CategoryItemHierModels.Skip(startIndex).Take(pageSize).ToList();
        if (categoryLayoutModel.CategoryItemHierModels[0].ItemId == null)
        {
            categoryItemHierModels.Insert(0, categoryLayoutModel.CategoryItemHierModels[0]);
        }
        var paymentInfoModel = (PaymentInfo1Model)Session["PaymentInfo"];
        paymentInfoModel = paymentInfoModel ?? new PaymentInfo1Model();
        paymentInfoModel.ShoppingCartModel = paymentInfoModel.ShoppingCartModel ?? new ShoppingCartModel();
        paymentInfoModel.ShoppingCartModel.BackToTop = true;
        paymentInfoModel.ShoppingCartModel.Checkout = true;
        paymentInfoModel.ShoppingCartModel.ShoppingCartSummaryModel = paymentInfoModel.ShoppingCartModel.ShoppingCartSummaryModel ?? new ShoppingCartSummaryModel();
        //paymentInfoModel.ShoppingCartModel.ShoppingCartSummaryModel = new ShoppingCartSummaryModel();
        paymentInfoModel.ShoppingCartModel.ShoppingCartItems = paymentInfoModel.ShoppingCartModel.ShoppingCartItems ?? new List<ShoppingCartItemModel>();
        paymentInfoModel.ShoppingCartModel.ShoppingCartSummaryItems = paymentInfoModel.ShoppingCartModel.ShoppingCartSummaryItems ?? new List<ShoppingCartItemModel>();
        for (int i = 1; i < paymentInfoModel.ShoppingCartModel.ShoppingCartSummaryItems.Count; i++)
        {
            paymentInfoModel.ShoppingCartModel.ShoppingCartSummaryItems.RemoveAt(1);
        }
        foreach (var shoppingCartItem in paymentInfoModel.ShoppingCartModel.ShoppingCartItems)
        {
            shoppingCartItem.ShoppingCartItemSummarys = new List<ShoppingCartItemModel>();
        }
        @Html.HiddenFor(m => m.ParentCategoryId)
        @Html.HiddenFor(m => m.PageNum)
        @Html.HiddenFor(m => m.PageSize)
        @Html.HiddenFor(m => m.TotalRowCount)
        if (Model.ParentCategoryId != 0)
        {
            @BuildPaginationLinks(pageCount)
            <br style="clear: both;" />
        }
        @BuildOrderCategoryItem(paymentInfoModel, categoryItemHierModels)
        if (Model.ParentCategoryId != 0)
        {
            <br style="clear: both;" />
            @BuildPaginationLinks(pageCount)
        }
        <div id="divShoppingCart" style="margin-left: auto; margin-right: auto; width: 72%;">
            @Html.Partial("_ShoppingCart", paymentInfoModel.ShoppingCartModel)
        </div>
    }
}@*helper BuildOrderCategoryItemHier(long parentCategoryId)*@
@helper BuildPaginationLinks(int pageCount)
{
    string baseUrl = Url.Action(Model.ActionName, Model.ControllerName);
    <ul class="pagination">
        @if (Model.PageNum == 1)
        {
            <li class="page-item">
                <span class="page-link">Prev</span>
            </li>
        }
        else
        {
            <li class="page-item">
                <a alt="Page# @(Model.PageNum - 1)" class="page-link" href="javascript: void(0);" onclick="javascript: return categoryId_onclick(@Model.ParentCategoryId, @(Model.PageNum - 1), '@baseUrl');" , title="Jump to page# @(Model.PageNum - 1)">
                    Prev
                </a>
            </li>
        }
        @for (int i = 1; i <= pageCount; i++)
        {
            if (i == Model.PageNum)
            {
                <li class="page-item active">
                    <a alt="Page# @i" class="page-link" href="javascript: void(0);" onclick="javascript: return categoryId_onclick(@Model.ParentCategoryId, @i, '@baseUrl');" , title="Jump to page# @i">
                        @i
                    </a>
                </li>
            }
            else
            {
                <li class="page-item">
                    <a alt="Page# @i" class="page-link" href="javascript: void(0);" onclick="javascript: return categoryId_onclick(@Model.ParentCategoryId, @i, '@baseUrl');" , title="Jump to page# @i">
                        @i
                    </a>
                </li>
            }
        }
        @if (Model.PageNum == pageCount)
        {
            <li class="page-item">
                <span class="page-link">Next</span>
            </li>
            @*<li class="page-item">
                    <span class="page-link">Last</span>
                </li>*@
        }
        else
        {
            <li class="page-item">
                <a alt="Page# @(Model.PageNum - 1)" class="page-link" href="javascript: void(0);" onclick="javascript: return categoryId_onclick(@Model.ParentCategoryId, @(Model.PageNum + 1)), '@baseUrl');" , title="Jump to page# @(Model.PageNum + 1)">
                    Next
                </a>
            </li>
        }
    </ul>
}
@helper BuildOrderCategoryItem(PaymentInfo1Model paymentInfoModel, List<CategoryItemHierModel> categoryItemHierModels)
{
    long clientId = ArchLibCache.ClientId;
    string clientName = ArchLibCache.ClientName;
    string categoryOrItem, imageDivWidth, imageHeight, imageWidth;
    int categoryCountIndex = 0, categoryCountPerRow = 3;
    int imageIndex = -1, imageCountIndex = 0, imageCountPerRow;
    List<CategoryItemHierModel> categoryItemHierModelsRecursive;
    CategoryLayoutModel categoryLayoutModel;
    foreach (var categoryItemHierModel in categoryItemHierModels)
    {
        categoryOrItem = categoryItemHierModel.CategoryOrItem;
        imageDivWidth = ArchLibCache.GetApplicationDefault(clientId, "OrderProcess", categoryOrItem + "ImageDivWidth");
        imageHeight = ArchLibCache.GetApplicationDefault(clientId, "OrderProcess", categoryOrItem + "ImageHeight");
        imageWidth = ArchLibCache.GetApplicationDefault(clientId, "OrderProcess", categoryOrItem + "ImageWidth");
        imageCountPerRow = int.Parse(ArchLibCache.GetApplicationDefault(clientId, "OrderProcess", categoryOrItem + "ImageCountPerRow"));

        //New code
        if (categoryItemHierModel.ProcessType == "Recursive")
        {
            categoryLayoutModel = RetailSlnCache.CategoryLayoutModels[categoryItemHierModel.CategoryModel.CategoryId.Value];
            categoryItemHierModelsRecursive = categoryLayoutModel.CategoryItemHierModels;
            <br style="clear: both;" />
            @BuildOrderCategoryItem(paymentInfoModel, categoryItemHierModelsRecursive)
        }//if (categoryItemHierModel.ProcessType == "Recursive")
        else
        {
            if (categoryItemHierModel.ProcessType == "ParentCategoryName")
            {
                <a href="@Url.Action("Index", "Home")" style="color: #000000; padding: 18px;" title="Return to categories">
                    <i class="fa fa-arrow-circle-left" style="font-size: 36px;"></i>
                </a>
                <span style="color: #a54000; font-family: 'Comic Sans MS'; font-size: 27px; font-weight: bold; letter-spacing: 4px; padding-left: 18px; padding-right: 18px; text-align: center; text-transform: uppercase;">@categoryItemHierModel.ParentCategoryModel.CategoryDesc</span>
                <br style="clear: both;" />
            }//if (categoryItemHierModel.ProcessType == "ParentCategoryName")
            else
            {
                if (categoryItemHierModel.CategoryId != null)
                {
                    categoryCountIndex++;
                    <div style="border-radius: 25px; color: #000000; display: inline-block; font-size: 20px; font-weight: bold; padding: 18px;">
                        @BuildCategory(categoryItemHierModel.CategoryModel, imageDivWidth, imageHeight, imageWidth, clientId, clientName, categoryOrItem)
                    </div>
                }//if (categoryItemHierModel.CategoryId != null)
                else
                {
                    imageIndex++;
                    imageCountIndex++;
                    <div style="display: inline-block; padding: 18px; vertical-align: top; width: @imageDivWidth;">
                        @BuildItem(paymentInfoModel, categoryItemHierModel.ItemModel, categoryItemHierModel.SeqNum, imageIndex, imageDivWidth, imageHeight, imageWidth, clientId, clientName, categoryOrItem)
                    </div>
                }//else (categoryItemHierModel.CategoryId != null)
            }//else (categoryItemHierModel.ProcessType == "ParentCategoryName")
        }//else (categoryItemHierModel.ProcessType == "Recursive")
        if (categoryCountIndex == categoryCountPerRow)
        {
            <br style="clear: both;" />
            categoryCountIndex = 0;
        }//if (categoryCountIndex == categoryCountPerRow)
        if (imageCountIndex == imageCountPerRow)
        {
            <br style="clear: both;" />
            imageCountIndex = 0;
        }//if (imageCountIndex == imageCountPerRow)
    }//foreach (var categoryItemHierModel in categoryItemHierModels)
    @*<br style="clear: both;" />
        <span style="color: #000000;">@(imageIndex + 1)</span>*@
}@*helper BuildOrderCategoryItem(List<CategoryItemHierModel> categoryItemHierModels)*@
@helper BuildCategory(CategoryModel categoryModel, string imageDivWidth, string imageHeight, string imageWidth, long clientId, string clientName, string categoryOrItem)
{
    <a href="javascript: void(0);" onclick="javascript: return categoryId_onclick(@categoryModel.CategoryId, 1, '')" style="color: #000000; text-decoration: underline;">
        <img class="img-responsive" src="~/ClientSpecific/@(clientId)_@(clientName)/Documents/Images/Category/@categoryModel.ImageName" style="border-radius: 25px; height: @imageHeight; width: @imageWidth;" />
        <div style="color: #000000; font-size: 16px; font-weight: 900; text-align: center; width: 100%;">
            @categoryModel.CategoryDesc
        </div>
    </a>
}
@helper BuildItem(PaymentInfo1Model paymentInfoModel, ItemModel itemModel, float seqNum, int imageIndex, string imageDivWidth, string imageHeight, string imageWidth, long clientId, string clientName, string categoryOrItem)
{
    //int k;
    string defaultOrderQty = ArchLibCache.GetApplicationDefault(clientId, "OrderProcess", "DefaultOrderQty");
    var shoppingCartItems = paymentInfoModel.ShoppingCartModel.ShoppingCartItems;
    ShoppingCartItemModel shoppingCartItemModel;
    <a href="@Url.Action("ItemAttributes", "Home", new { id = itemModel.ItemId, tabId = 0 })" target="_blank" title="View specifications, images, bundle - @itemModel.ItemShortDesc">
        <img alt="@itemModel.ImageTitle" class="img-responsive" src="~/ClientSpecific/@(clientId)_@(clientName)/Documents/Images/Items/@itemModel.ImageName" style="border-radius: 25px; height: auto; max-height: @imageHeight; max-width: @imageWidth; width: 100%;" title="@itemModel.ImageTitle" />
    </a>
    if (itemModel.ItemStatusId == ItemStatusEnum.OutOfStock)
    {
        @*<div style="position: relative;">
            <div style="bottom: 1px; left: 2px; position: absolute;">
                <span style="background-color: #000000; color: #ffffff; font-family: Arial; font-size: 12px; font-weight: 600; padding: 3px;" title="@itemModel.ImageTitle">Sold out&nbsp;</span>
            </div>
        </div>*@
    }
    if (itemModel.ItemTypeId == ItemTypeEnum.ItemBundle)
    {
        <div style="position: relative;">
            <div style="bottom: 1px; right: 2px; position: absolute;">
                <a href="@Url.Action("ItemAttributes", "Home", new { id = itemModel.ItemId, tabId = 3 })" style="background-color: #000000; border-style: none; color: #ffffff; font-family: Arial; font-size: 12px; font-weight: 600; padding: 3px;" target="_blank" title="@itemModel.ImageTitle">Item Bundle&nbsp;</a>
            </div>
        </div>
    }
    <br style="clear: both;" />
    @*<span style="color: #000000; font-weight: bold; padding-right: 5px;">@itemModel.ItemRateFormatted</span>*@
    @*for (k = 0; k < itemModel.ItemStarCount; k++)
        {
            <span class="fa fa-star" style="color: #ff9900;"></span>
        }
        for (; k < 5; k++)
        {
            <span class="fa fa-star-o" style="color: #ff9900;"></span>
        }*@
    <br style="clear: both;" />
    <div style="text-align: left; width: 100%;">
        <span style="color: #1d1d1d; font-family: Arial; font-size: 16px; font-style: normal; font-weight: 400; line-height: 21px;">@(itemModel.ItemRateFormatted + " - " + itemModel.ItemShortDesc)</span>
        @if (itemModel.ItemSpecModelsForDisplay.Count > 0)
        {
            <br />
            foreach (var itemSpecModelForDisplay in itemModel.ItemSpecModelsForDisplay)
            {
                if (itemSpecModelForDisplay.Key != "ProductCode" && itemSpecModelForDisplay.Key != "HSNCode")
                {
                    <span style="color: #000000; font-size: 11px; font-weight: 600;">@itemSpecModelForDisplay.Value.ItemSpecValueForDisplay</span>
                }
            }
            <br style="clear: both;" />
        }
    </div>
    if (itemModel.ItemTypeId == ItemTypeEnum.ItemBundle)
    {
        <a href="@Url.Action("ItemAttributes", "Home", new { id = itemModel.ItemId, tabId = 3 })" style="color: #000000; font-size: 12px; font-weight:bold; padding-right: 3px; text-decoration: underline;" target="_blank" title="View items in the bundle - @itemModel.ItemShortDesc">Bundle</a>
    }
    <a href="@Url.Action("ItemAttributes", "Home", new { id = itemModel.ItemId, tabId = 0 })" style="color: #ff0000; font-size: 12px; font-weight:bold; text-decoration: underline;" target="_blank" title="View specifications - @itemModel.ItemShortDesc">Spec(s)</a>
    <a href="@Url.Action("ItemAttributes", "Home", new { id = itemModel.ItemId, tabId = 2 })" style="color: #0000ff; font-size: 12px; font-weight:bold; padding-left: 3px; text-decoration: underline;" target="_blank" title="View more images - @itemModel.ItemShortDesc">Image(s)</a>
    if (itemModel.ItemStatusId == ItemStatusEnum.OutOfStock)
    {
        <br style="clear: both;" />
        <br style="clear: both;" />
        <span style="color: #000000; font-size: 17px; font-weight: 900;">SOLD OUT</span>
    }//if (itemModel.ItemStatusId == ItemStatusEnum.OutOfStock)
    else
    {
        <br style="clear: both;" />
        <div style="float: left; font-size: 12px; font-weight: bold; height: 40px; padding-right: 5px; padding-top: 8px; vertical-align: middle;">
            <input class="form-control" id="orderQty@(imageIndex)" inputmode="numeric" max="9999" maxlength="4" min="1" oninput="javascript: return orderQty_oninput(@(imageIndex));" style="background-color: #e1e1e1; border-color: #000000; border-style: none; border-width: 1px; border-radius: 30px; float: left; font-size: 12px; font-weight: 900; width: 72px;" title="Enter quantity and click add to cart @itemModel.ImageTitle" type="number" value="@defaultOrderQty" />
            @if (defaultOrderQty == "")
            {
                <a href="javascript: void(0);" onclick="javascript: return addToCart_onclick(@Model.ParentCategoryId, @Model.PageNum, @Model.PageSize, @Model.TotalRowCount);" title="Enter quantity and click add to cart @itemModel.ItemShortDesc"><img alt="Enter quantity and click add to cart" src="~/Images/Addtocart.png" style="height: 36px; padding-left: 4px; width: 45px;" title="Enter quantity and click add to cart @itemModel.ImageTitle" /></a>
            }
            else
            {
                <a href="javascript: void(0);" onclick="javascript: return addToCartGet_onclick(@imageIndex, '@defaultOrderQty', @Model);" title="Enter quantity and click add to cart @itemModel.ItemShortDesc"><img alt="Enter quantity and click add to cart" src="~/Images/Addtocart.png" style="height: 36px; padding-left: 4px; width: 45px;" title="Enter quantity and click add to cart @itemModel.ImageTitle" /></a>
            }
        </div>
        shoppingCartItemModel = shoppingCartItems?.FirstOrDefault(x => x.ItemId == itemModel.ItemId);
        if (shoppingCartItemModel != null)
        {
            <span style="font-family: Arial; font-size: 12px; font-weight: bold;">
                <i class="fa fa-check" style="color: #00d000; padding-left: 7px; padding-right: 1px;"></i>
                <span style="color: #a54000; font-size: 12px; padding-right: 5px;">Added...<span style="color: #0000ff; font-size:12px;">@(shoppingCartItemModel?.OrderQty)</span></span>
                <br style="clear: both;">
            </span>
        }
    }//else (itemModel.ItemStatusId == ItemStatusEnum.OutOfStock)
    <br style="clear: both;" />
    <span id="itemId@(imageIndex)" style="display: none;">@itemModel.ItemId</span>
}
