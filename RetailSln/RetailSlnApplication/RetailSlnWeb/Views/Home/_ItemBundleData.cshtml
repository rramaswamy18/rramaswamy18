@model ItemBundleDataModel
@using ArchitectureLibraryCacheData
@using RetailSlnCacheData
@using RetailSlnEnumerations
@using RetailSlnModels
@functions {
    int orderQtyIndex = -1;
}
@{
    if (Model.ItemBundleModel != null)
    {
        var clientId = ArchLibCache.ClientId;
        var clientName = ArchLibCache.ClientName;
        var imageTitle = ArchLibCache.GetApplicationDefault(clientId, "BusinessName1", "") + " | " + ArchLibCache.GetApplicationDefault(clientId, "BusinessType", "");
        BuildItemBundle(Model.ItemBundleModel, ref orderQtyIndex, clientId, clientName);
        <span id="itemBundleId">@Model.ItemBundleModel.ItemBundleId</span>
        <span id="discountPercent">@Model.ItemBundleModel.DiscountPercent</span>
        <table class="table table-bordered table-condensed table-responsive" style="width: 81%;">
            <colgroup>
                <col style="width: 3%;" />
                <col style="width: 6%;" />
                <col />
                <col style="width: 9%;" />
                <col style="width: 9%;" />
                <col style="width: 8%;" />
            </colgroup>
            <tr>
                <th>#</th>
                <th>Id</th>
                <th>Ummachi</th>
                <th>Price</th>
                <th>Qty</th>
            </tr>
            @BuildItemBundle(Model.ItemBundleModel, true, clientId, clientName)
        </table>
    }
}
@helper BuildItemBundle(ItemBundleModel itemBundleModel, bool itemEdit, long clientId, string clientName)
{
    int index = 0;
    ItemBundleModel itemBundleModelTemp;
    List<ItemBundleItemModel> itemBundleItemModels = itemBundleModel.ItemBundleItemModels;
    foreach (ItemBundleItemModel itemBundleItemModel in itemBundleItemModels)
    {
        <tr>
            <td class="text-right">
                @(++index).
            </td>
            <td class="text-center">
                <a href="@Url.Action("ItemAttributes", "Home", new { id = itemBundleItemModel.ItemModel.ItemMasterId, tabId = 0 })" style="font-size: 13px; font-weight: bold; text-decoration: underline;" target="_blank">@itemBundleItemModel.ItemModel.ItemId</a>
                <span id="itemId@(itemBundleItemModel.OrderQtyIndex)" style="display: none;">@itemBundleItemModel.ItemModel.ItemId</span>
            </td>
            <td>
                @itemBundleItemModel.ItemModel.ItemMasterModel.ItemMasterDesc
                <span id="itemBundleItemId@(itemBundleItemModel.OrderQtyIndex)">@itemBundleItemModel.ItemBundleItemId</span>
                <span id="quantity@(itemBundleItemModel.OrderQtyIndex)">@itemBundleItemModel.Quantity</span>
                <span id="itemTypeId@(itemBundleItemModel.OrderQtyIndex)">@itemBundleItemModel.ItemModel.ItemTypeId</span>
                <span id="itemRateBeforeDiscount@(itemBundleItemModel.OrderQtyIndex)">@itemBundleItemModel.ItemRateBeforeDiscount</span>
                <span id="itemRateAfterDiscount@(itemBundleItemModel.OrderQtyIndex)">@itemBundleItemModel.ItemRateAfterDiscount</span>
                <br /><span>Quantity @itemBundleItemModel.Quantity</span>
                <br /><span>ItemBundleItemId @itemBundleItemModel.ItemBundleItemId</span>
                @if (itemBundleItemModel.ItemModel.ItemTypeId == ItemTypeEnum.ItemBundle)
                {
                    itemBundleModelTemp = RetailSlnCache.ItemBundleModels.First(x => x.ItemId == itemBundleItemModel.ItemModel.ItemId);
                    <br />
                    <span>ItemTypeId @((int)itemBundleItemModel.ItemModel.ItemTypeId)</span><br />
                    <span>OrderQtyIndex @itemBundleItemModel.OrderQtyIndex</span><br />
                    <span>OrderQtyIndexStart @itemBundleItemModel.OrderQtyIndexStart</span><br />
                    <span>OrderQtyIndexFinish @itemBundleItemModel.OrderQtyIndexFinish</span><br />
                    <span>ItemRateBeforeDiscount @itemBundleItemModel.ItemRateBeforeDiscount</span><br />
                    <span>ItemRateAfterDiscount @itemBundleItemModel.ItemRateAfterDiscount</span><br />
                    <button class="btn btn-success" onclick="javascript: return btnItemBundleView_onclick('tblItemBundle@(itemBundleModelTemp.ItemBundleId)');" style="font-size: 12px;">View</button>
                    <span style="padding-left: 3px;"><button class="btn btn-primary" onclick="javascript: return btnItemBundleHide_onclick('tblItemBundle@(itemBundleModelTemp.ItemBundleId)');" style="font-size: 12px;">Hide</button></span>
                    <table class="table table-bordered table-condensed table-responsive" id="tblItemBundle@(itemBundleModelTemp.ItemBundleId)" style="display: none; float: left;">
                        <colgroup>
                            <col style="width: 3%;" />
                            <col style="width: 6%;" />
                            <col />
                            <col style="width: 9%;" />
                            <col style="width: 8%;" />
                            <col style="width: 8%;" />
                        </colgroup>
                        <tr>
                            <th>#</th>
                            <th>Id</th>
                            <th>Description</th>
                            <th>Price</th>
                            <th>Qty</th>
                        </tr>
                        @BuildItemBundle(itemBundleModelTemp, false, clientId, clientName)
                    </table>
                }
            </td>
            <td class="text-right">
                @itemBundleItemModel.ItemRateAfterDiscountFormatted
            </td>
            <td>
                <span id="itemId@(itemBundleItemModel.OrderQtyIndex)">@itemBundleItemModel.ItemModel.ItemId</span>
                @if (itemBundleItemModel.ItemModel.ItemTypeId == ItemTypeEnum.ItemBundle)
                {
                    <br /><span>@itemEdit</span>
                    itemBundleModelTemp = RetailSlnCache.ItemBundleModels.First(x => x.ItemId == itemBundleItemModel.ItemModel.ItemId);
                    @*<input class="form-control" id="orderQty@(seqNumSave)" min="0" max="999" maxlength="3" name="orderQty@(seqNum)" oninput="javascript: return orderQty_oninput('@(seqNum + 1)', '@(itemBundleModelTemp.ItemBundleItemModels.Count)', '@(itemBundleModel.Discount)');" style="width: 72px;" type="number" value="@itemBundleItemModel.Quantity" />*@
                    if (itemEdit)
                    {
                        <input class="form-control" id="orderQty@(itemBundleItemModel.OrderQtyIndex)" min="0" max="999" maxlength="3" name="orderQty@(itemBundleItemModel.OrderQtyIndex)" oninput="javascript: return orderQty_oninput2('@itemBundleItemModel.OrderQtyIndex', '@itemBundleItemModel.OrderQtyIndexStart', '@itemBundleItemModel.OrderQtyIndexFinish');" style="width: 72px;" type="number" value="@itemBundleItemModel.Quantity" />
                    }
                    else
                    {
                        <input class="form-control" id="orderQty@(itemBundleItemModel.OrderQtyIndex)" min="0" max="999" maxlength="3" name="orderQty@(itemBundleItemModel.OrderQtyIndex)" oninput="javascript: return false;" readonly="readonly" style="width: 72px;" value="@itemBundleItemModel.Quantity" />
                    }
                }
                else
                {
                    if (itemEdit)
                    {
                        <input class="form-control" id="orderQty@(itemBundleItemModel.OrderQtyIndex)" min="1" max="999" maxlength="3" name="orderQty@(itemBundleItemModel.OrderQtyIndex)" style="width: 72px;" type="number" value="@itemBundleItemModel.Quantity" />
                    }
                    else
                    {
                        <input class="form-control" id="orderQty@(itemBundleItemModel.OrderQtyIndex)" min="1" max="999" maxlength="3" name="orderQty@(itemBundleItemModel.OrderQtyIndex)" onkeypress="javascript: return false;" onkeyup="javascript: return false;" readonly="readonly" style="width: 72px;" value="@itemBundleItemModel.Quantity" />
                    }
                }
            </td>
            <td>
                <img alt="@(itemBundleItemModel.ItemModel.ItemMasterModel.ItemMasterDesc + " " + itemBundleItemModel.ItemModel.ItemMasterModel.ImageTitle)" src="~/ClientSpecific/@(clientId)_@(clientName)/Documents/Images/ItemMaster/@itemBundleItemModel.ItemModel.ItemMasterModel.ImageName" style="height: 90px; width: 90px;" title="@(itemBundleItemModel.ItemModel.ItemMasterModel.ItemMasterDesc + " " + itemBundleItemModel.ItemModel.ItemMasterModel.ImageTitle)" />
            </td>
        </tr>
    }
}
@functions {
    private void BuildItemBundle(ItemBundleModel itemBundleModel, ref int orderQtyIndex, long clientId, string clientName)
    {
        ItemBundleModel itemBundleModelTemp;
        foreach (var itemBundleItemModel in itemBundleModel.ItemBundleItemModels)
        {
            orderQtyIndex++;
            itemBundleItemModel.OrderQtyIndex = orderQtyIndex;
            if (itemBundleItemModel.ItemModel.ItemTypeId == ItemTypeEnum.ItemBundle)
            {
                itemBundleItemModel.OrderQtyIndexStart = orderQtyIndex + 1;
                itemBundleModelTemp = RetailSlnCache.ItemBundleModels.First(x => x.ItemId == itemBundleItemModel.ItemModel.ItemId);
                BuildItemBundle(itemBundleModelTemp, ref orderQtyIndex, clientId, clientName);
                itemBundleItemModel.OrderQtyIndexFinish = orderQtyIndex;
            }
        }
    }
}
