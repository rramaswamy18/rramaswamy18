@using ArchitectureLibraryCacheData
@model ArchitectureLibraryModels.UpdatePasswordModel
@{
    var codeDataModels = LookupCache.GetCodeDatasForCodeTypeNameDescByCodeDataNameId("OTPSendType", "");
}
<style>
    #EmailAddress-error, #ConfirmEmailAddress-error, #OTPCode-error, #LoginPassword-error, #ConfirmLoginPassword-error, #CaptchaAnswer-error {
        color: #ff0000;
        display: block;
        font-size: 14px;
        font-weight: bold;
    }
</style>
<style>
    .passwordStrengthValid {
        color: #008000;
        font-weight: bold;
    }

        .passwordStrengthValid:before {
            position: relative;
            left: -35px;
            content: "✔";
        }

    /* Add a red text color and an "x" when the requirements are wrong */
    .passwordStrengthInvalid {
        color: #ff0000;
        font-weight: bold;
    }

        .passwordStrengthInvalid:before {
            position: relative;
            left: -35px;
            content: "✖";
        }
</style>
@Html.HiddenFor(m => m.OTPExpiryDateTime)
@if (Model != null && Model.ResponseObjectModel != null && !string.IsNullOrWhiteSpace(Model.ResponseObjectModel.ValidationSummaryMessage))
{
    <div class="row validationSummaryMessage" id="divUpdatePasswordValidationSummaryMessage">
        @Model.ResponseObjectModel.ValidationSummaryMessage
    </div>
}
@if (!ViewData.ModelState.IsValid)
{
    <div class="row" id="divUpdatePasswordValidationSummary" style="margin-left: auto; margin-right: auto; padding: 5px;">
        @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationSummary(false, "", new { @class = "validationSummaryErrors", style = "-webkit-column-count: 3; -moz-column-count: 3; column-count: 3; font-size: 12px; text-align: left;" }).ToHtmlString()))
    </div>
}
else
{
    if (Model != null && Model.ResponseObjectModel != null)
    {
        <div class="row" id="divUpdatePasswordResponseObject">
            @Html.Partial("_ResponseObject", Model.ResponseObjectModel)
        </div>
    }
}
<div class="col-md-6" style="text-align: left;">
    <div class="row" style="padding-left: 18px; padding-right: 18px;">
        @Html.LabelFor(m => m.EmailAddress)&nbsp;<span style="color: #0000ff; font-weight: bold;">(Required)</span>
        @Html.TextBoxFor(m => m.EmailAddress, new { @class = "form-control validate", placeholder = "Enter " + @Html.DisplayNameFor(m => m.EmailAddress), style = "width: 90%;" })
        @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(m => m.EmailAddress, "", new { id = "EmailAddress-error", placeholder = "Enter " + @Html.DisplayNameFor(m => m.EmailAddress) }).ToHtmlString()))
    </div>

    @*<br style="clear: both;" />
        <div class="row" style="padding-left: 18px; padding-right: 18px;">
            @Html.LabelFor(m => m.ConfirmEmailAddress)&nbsp;<span style="color: #0000ff; font-weight: bold;">(Required)</span>
            @Html.TextBoxFor(m => m.ConfirmEmailAddress, new { @class = "form-control validate", oncopy = "javascript: return false;", oncut = "javascript: return false;", ondrag = "javascript: return false;", ondrop = "javascript: return false;", onpaste = "javascript: return false;", onselectstart = "javascript: return false;", placeholder = "Enter " + @Html.DisplayNameFor(m => m.ConfirmEmailAddress), style = "width: 90%;" })
            @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(m => m.ConfirmEmailAddress, "", new { id = "ConfirmEmailAddress-error" }).ToHtmlString()))
        </div>*@

    <br style="clear: both;" />
    <div class="row" style="padding-left: 18px; padding-right: 18px;">
        @Html.LabelFor(m => m.OTPCode)&nbsp;<span style="color: #0000ff; font-weight: bold;">(Required)</span> Expires <span id="OTPExpiryTime" style="color: #000000; font-size: 18px; font-weight: bold;">@DateTime.Parse(Model.OTPExpiryDateTime).ToString("h:mmtt").ToLower()</span>
        @Html.TextBoxFor(m => m.OTPCode, new { @class = "form-control validate", placeholder = "Enter " + @Html.DisplayNameFor(m => m.OTPCode), style = "width: 90%;" })
        @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(m => m.OTPCode, "", new { id = "OTPCode-error" }).ToHtmlString()))
    </div>

    <br style="clear: both;" />
    <div class="row" style="padding-left: 18px; padding-right: 18px; text-align: left;">
        <label class="radio-inline" style="font-weight: bold;">
            <input id="OTPSendTypeId0" name="OTPSendTypeId" type="radio" value="@codeDataModels[0].CodeDataNameId">@codeDataModels[0].CodeDataDesc0
        </label>
        @for (int i = 1; i < codeDataModels.Count; i++)
        {
            <label class="radio-inline" style="font-weight: bold;">
                <input disabled="disabled" id="OTPSendTypeId@(i)" name="OTPSendTypeId" type="radio" value="@codeDataModels[i].CodeDataNameId">@codeDataModels[i].CodeDataDesc0
            </label>
        }
        <br style="clear: both;" />
        <button class="btn btn-primary" id="getNewOTP" onclick="javascript: return getNewOTP_onclick();" style="float: left; font-weight: bold; letter-spacing: 9px; text-transform: uppercase; width: 54%;" type="button">get&nbsp;new&nbsp;otp</button>
        <br style="clear: both;" />
        @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(m => m.OTPSendTypeId, "", new { id = "OTPSendTypeId-error", style = "float: left; width: 36%;" }).ToHtmlString()))
    </div>

    <br style="clear: both;" />
    <div class="row" style="padding-left: 18px; padding-right: 18px;">
        @Html.LabelFor(m => m.CaptchaAnswer, new { @class = "col-form-label" })&nbsp;- Sum of <span style="color: #ff0000; font-weight: bold;">@Model.CaptchaNumber0</span> & <span style="color: #ff0000; font-weight: bold;">@Model.CaptchaNumber1</span><span style="color: #0000ff; font-weight: bold;">? (Required)</span>
        @Html.TextBoxFor(m => m.CaptchaAnswer, null, new { @class = "form-control", placeholder = @Model.CaptchaNumber0 + " + " + @Model.CaptchaNumber1 + " =?", style = "width: 90%;" })
        @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(m => m.CaptchaAnswer, "", new { id = "CaptchaAnswer-error" }).ToHtmlString()))
    </div>
</div>

<div class="col-md-6" style="text-align: left;">
    <ul id="passwordStrengthMessages" style="vertical-align: top;">
        @if (Model.PasswordStrengthMessages != null)
        {
            for (int i = 0; i < Model.PasswordStrengthMessages.Count; i++)
            {
                <li class="passwordStrengthInvalid" id="passwordStrengthMessage@(i)" style="list-style-type: decimal;">@Model.PasswordStrengthMessages[i]</li>
            }
        }
    </ul>
    <div class="row" style="padding-left: 18px; padding-right: 18px;">
        @Html.LabelFor(m => m.LoginPassword, new { @class = "col-form-label" })&nbsp;<span style="color: #0000ff; font-weight: bold;">(Required)</span>
        <div>
            @Html.TextBoxFor(m => m.LoginPassword, new { @class = "form-control validate", placeholder = "Enter " + @Html.DisplayNameFor(m => m.LoginPassword), style = "float: left; width: 76%;", @type = "password" })
            <span style="width: 18px;">&nbsp;</span>
            <button class="btn btn-primary" id="btnLoginPassword" onmouseout="javascript: return showHideForHide('LoginPassword', 'password');" onmouseover="javascript: return showHideForShow('LoginPassword', 'text');" type="button" style="width: 50px;">
                <span class="fa fa-eye-slash icon"></span>
            </button>
        </div>
        @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(m => m.LoginPassword, "", new { id = "LoginPassword-error" }).ToHtmlString()))
    </div>

    <br style="clear: both;" />
    <div class="row" style="padding-left: 18px; padding-right: 18px;">
        @Html.LabelFor(m => m.ConfirmLoginPassword, new { @class = "col-form-label" })&nbsp;<span style="color: #0000ff; font-weight: bold;">(Required)</span>
        <div>
            @Html.TextBoxFor(m => m.ConfirmLoginPassword, new { @class = "form-control validate", oncopy = "javascript: return false;", oncut = "javascript: return false;", ondrag = "javascript: return false;", ondrop = "javascript: return false;", onpaste = "javascript: return false;", onselectstart = "javascript: return false;", placeholder = "Enter " + @Html.DisplayNameFor(m => m.ConfirmLoginPassword), style = "float: left; width: 76%;", @type = "password" })
            <span style="width: 18px;">&nbsp;</span>
            <button class="btn btn-primary" id="btnConfirmLoginPassword" onmouseout="javascript: return showHideForHide('ConfirmLoginPassword', 'password');" onmouseover="javascript: return showHideForShow('ConfirmLoginPassword', 'text');" type="button" style="width: 50px;">
                <span class="fa fa-eye-slash icon"></span>
            </button>
        </div>
        @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(m => m.ConfirmLoginPassword, "", new { id = "ConfirmLoginPassword-error" }).ToHtmlString()))
    </div>
</div>
