@model ArchitectureLibraryModels.UpdatePasswordModel
<style>
    #EmailAddress-error, #ConfirmEmailAddress-error, #ResetPasswordKey-error, #LoginPassword-error, #ConfirmLoginPassword-error, #CaptchaAnswer-error {
        color: #ff0000;
        display: block;
        font-size: 14px;
        font-weight: bold;
    }
</style>
@Html.HiddenFor(m => m.ResetPasswordQueryString)
<div id="divUpdatePasswordScrollIntoView" style="font-weight: bold;"></div>
@if (Model != null && Model.ResponseObjectModel != null && !string.IsNullOrWhiteSpace(Model.ResponseObjectModel.ValidationSummaryMessage))
{
    <div class="row validationSummaryMessage" id="divUpdatePasswordValidationSummaryMessage">
        @Model.ResponseObjectModel.ValidationSummaryMessage
    </div>
}
@if (!ViewData.ModelState.IsValid)
{
    <div class="row" id="divUpdatePasswordValidationSummary">
        @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationSummary(false, "", new { @class = "validationSummaryErrors" }).ToHtmlString()))
    </div>
}
else
{
    if (Model != null && Model.ResponseObjectModel != null)
    {
        <div class="row" id="divUpdatePasswordResponseObject">
            @Html.Partial("_ResponseObject", Model.ResponseObjectModel)
        </div>
    }
}
<div class="col-md-6" style="text-align: left;">
    <div class="row" style="padding-left: 18px; padding-right: 18px;">
        @Html.LabelFor(m => m.EmailAddress)&nbsp;<span style="color: #0000ff; font-weight: bold;">(Required)</span>
        @Html.TextBoxFor(m => m.EmailAddress, new { @class = "form-control validate", placeholder = "Enter " + @Html.DisplayNameFor(m => m.EmailAddress), style = "width: 90%;" })
        @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(m => m.EmailAddress, "", new { id = "EmailAddress-error", placeholder = "Enter " + @Html.DisplayNameFor(m => m.EmailAddress) }).ToHtmlString()))
    </div>

    <div class="row" style="padding-left: 18px; padding-right: 18px;">
        @Html.LabelFor(m => m.ConfirmEmailAddress)&nbsp;<span style="color: #0000ff; font-weight: bold;">(Required)</span>
        @Html.TextBoxFor(m => m.ConfirmEmailAddress, new { @class = "form-control validate", oncopy = "javascript: return false;", oncut = "javascript: return false;", ondrag = "javascript: return false;", ondrop = "javascript: return false;", onpaste = "javascript: return false;", onselectstart = "javascript: return false;", placeholder = "Enter " + @Html.DisplayNameFor(m => m.ConfirmEmailAddress), style = "width: 90%;" })
        @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(m => m.ConfirmEmailAddress, "", new { id = "ConfirmEmailAddress-error" }).ToHtmlString()))
    </div>

    <div class="row" style="padding-left: 18px; padding-right: 18px;">
        @Html.LabelFor(m => m.ResetPasswordKey)&nbsp;<span style="color: #0000ff; font-weight: bold;">(Required)</span>
        @Html.TextBoxFor(m => m.ResetPasswordKey, new { @class = "form-control validate", placeholder = "Enter " + @Html.DisplayNameFor(m => m.ResetPasswordKey), style = "width: 90%;" })
        @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(m => m.ResetPasswordKey, "", new { id = "ResetPasswordKey-error" }).ToHtmlString()))
    </div>
</div>
<div class="col-md-6" style="text-align: left;">
    <div class="row" style="padding-left: 18px; padding-right: 18px;">
        @Html.LabelFor(m => m.LoginPassword, new { @class = "col-form-label" })&nbsp;<span style="color: #0000ff; font-weight: bold;">(Required)</span>
        <div>
            @Html.TextBoxFor(m => m.LoginPassword, new { @class = "form-control validate", placeholder = "Enter " + @Html.DisplayNameFor(m => m.LoginPassword), style = "float: left; width: 76%;", @type = "password" })
            <span style="width: 18px;">&nbsp;</span>
            <button class="btn btn-primary" id="btnLoginPassword" onmouseout="javascript: return showHideForHide('LoginPassword', 'password');" onmouseover="javascript: return showHideForShow('LoginPassword', 'text');" type="button" style="width: 50px;">
                <span class="fa fa-eye-slash icon"></span>
            </button>
        </div>
        @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(m => m.LoginPassword, "", new { id = "LoginPassword-error" }).ToHtmlString()))
    </div>

    <div class="row" style="padding-left: 18px; padding-right: 18px;">
        @Html.LabelFor(m => m.ConfirmLoginPassword, new { @class = "col-form-label" })&nbsp;<span style="color: #0000ff; font-weight: bold;">(Required)</span>
        <div>
            @Html.TextBoxFor(m => m.ConfirmLoginPassword, new { @class = "form-control validate", oncopy = "javascript: return false;", oncut = "javascript: return false;", ondrag = "javascript: return false;", ondrop = "javascript: return false;", onpaste = "javascript: return false;", onselectstart = "javascript: return false;", placeholder = "Enter " + @Html.DisplayNameFor(m => m.ConfirmLoginPassword), style = "float: left; width: 76%;", @type = "password" })
            <span style="width: 18px;">&nbsp;</span>
            <button class="btn btn-primary" id="btnConfirmLoginPassword" onmouseout="javascript: return showHideForHide('ConfirmLoginPassword', 'password');" onmouseover="javascript: return showHideForShow('ConfirmLoginPassword', 'text');" type="button" style="width: 50px;">
                <span class="fa fa-eye-slash icon"></span>
            </button>
        </div>
        @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(m => m.ConfirmLoginPassword, "", new { id = "ConfirmLoginPassword-error" }).ToHtmlString()))
    </div>

    <div class="row" style="padding-left: 18px; padding-right: 18px;">
        @Html.LabelFor(m => m.CaptchaAnswer, new { @class = "col-form-label" })&nbsp;- Sum of <span style="color: #ff0000; font-weight: bold;">@Model.CaptchaNumber0</span> & <span style="color: #ff0000; font-weight: bold;">@Model.CaptchaNumber1</span><span style="color: #0000ff; font-weight: bold;">? (Required)</span>
        @Html.TextBoxFor(m => m.CaptchaAnswer, null, new { @class = "form-control", placeholder = @Model.CaptchaNumber0 + " + " + @Model.CaptchaNumber1 + " =?", style = "width: 90%;" })
        @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(m => m.CaptchaAnswer, "", new { id = "CaptchaAnswer-error" }).ToHtmlString()))
    </div>
</div>
